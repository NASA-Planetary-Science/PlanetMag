% For calculating Jupiter magnetic field, based on Fortran code from
% K. Khurana and H. Schwarzl after Khurana and Schwarzl (2005):
% https://doi.org/10.1029/2004JA010757 .
% Author: Marshall J. Styczinski, itsmoosh@gmail.com
% Last updated: 2022-02-07
function [Bvec, Mdip, Odip] = KSMagFldJupiter(latS3_deg, lonS3_deg, altJup_km, ets, SPHOUT)
    % Calculate magnetic field vectors, magnetic dipole moment,
    % and dipole offset in System III coordinates based on VIP4
    % Jupiter field model, plus the latest evolution of the Khurana
    % current sheet model from K. Khurana.
    
    % Args:
    %   latS3_deg: float, shape(1xN). System III latitude in degrees.
    %   lonS3_deg: float, shape(1xN). System III east longitude
    %       (right-handed) in degrees.
    %   altJup_km: float, shape(1xN). Altitude above Jupiter's "surface" in
    %       km.
    %   ets: float, shape(1xN). Times in TDB seconds past J2000
    %   NOTE: A leapseconds kernel must already be loaded with Mice using,
    %       e.g. cspice_furnsh('naif0012.tls')
    % Outputs:
    %   Bvec: float, shape(3xN). Magnetic field vectors in Gauss, aligned
    %       to Jupiter System III cartesian axes.
    %   Mdip: float, shape(1x3). Magnetic dipole moment in Gm^3 relative to
    %       System III coordinate system. Not currently implemented.
    %   Odip: float, shape(1x3). Offset of magnetic dipole moment in km
    %       relative to System III coordinate system. Not currently 
    %       implemented.
    
    % Whether to use the exact values used in Khurana's code. If False (0):
    %   1. Convert distances to units of Rj = 71323 km as in VIP4 paper
    %   2. Use more precise VIP4 tables of g and h
    %   3. Use corrected values for Jupiter rotation period and rate
    global trueToKK;
    if ~exist('SPHOUT', 'var')
        SPHOUT = 0;
    end
    
    Rj = 71492;    
    r = (altJup_km + Rj) / Rj;
    theta = deg2rad(90 - latS3_deg);
    phi = deg2rad(lonS3_deg);
    ctimes = ctimer(ets);
    npts = length(ets);
    
    % Dimension of magnetotail model coefficients
    M = 8;
    % Mode is the set of parameters to sum over for outer magnetosphere models
    Mode = 7;
    
    % Get VIP4 coefficients in G
    [gVIP4, hVIP4] = VIP4coeffs();
    % Convert to nT
    gVIP4 = gVIP4 * 1e5;
    hVIP4 = hVIP4 * 1e5;
    
    % parmod is a list of model parameters.
    dipTilt_deg = 0; % Tilt of dipole axis (relative to JSM z axis? MJS note: I think this should always be zero if I have the definition correct.)
    if trueToKK
        B0 = sqrt(420543.0^2 + 65920.0^2 + 24992.0^2);
    else
        B0 = sqrt(gVIP4(1,1)^2 + gVIP4(1,2)^2 + hVIP4(1,2)^2);  % Magnitude of dipole moment in VIP4 model in nT
    end
    Nmodes = 3;  % "Number of dipole modes" (?)
    parmod = [ ...
        dipTilt_deg, ...
        B0, ...
        Nmodes, ...
        zeros(1,7)
        ];
    
    % Dipole moment vector calculation
    g = gVIP4;
    h = hVIP4;
    M0 = 4*pi*B0*1e-15*(Rj*1e3)^3 / (4e-7*pi);
    Mdip = [g(1,2), h(1,2), g(1,1)] * 1e5;
    %% Offset dipole -- see Koochak and Fraser-Snith 2017
    % Note two typos in Koochak and Fraser-Snith (2017) Eq. 4: G11 and G20
    % should be g11 and g20, and the g20 inside square brackets should be
    % g21, see Fraser-Snith (1987).
    L0 = 2*g(1,1)*g(2,1) + sqrt(3)*(g(2,1)*g(2,2) + h(1,2)*h(2,2));                 % L0 = 2*g10*g20 + sqrt(3)*(g11*g21 + h11*h21)
    L1 =  -g(1,2)*g(2,1) + sqrt(3)*(g(1,1)*g(2,2) + g(1,2)*g(2,3) + h(1,2)*h(2,3)); % L1 =  -g11*g20 + sqrt(3)*(g10*g21 + g11*g22 + h11*h22)
    L2 =  -h(1,2)*g(2,1) + sqrt(3)*(g(1,1)*h(2,2) - h(1,2)*g(2,3) + g(1,2)*h(2,3)); % L2 =  -h11*g20 + sqrt(3)*(g10*h21 - h11*g22 + g11*h22)
    E = (L0*g(1,1) + L1*g(1,2) + L2*h(1,2)) / (4*B0^2);                             % E = (L0*g10 + L1*g11 + L2*h11) / (4*B0^2)

    % unitless offset parameters
    xi =   (L0 - g(1,1)*E) / (3*B0^2); % z-axis: xi =   (L0 - g10*E) / (3*B0^2)
    eta =  (L1 - g(1,2)*E) / (3*B0^2); % x-axis: eta =  (L1 - g11*E) / (3*B0^2)
    zeta = (L2 - h(1,2)*E) / (3*B0^2); % y-axis: zeta = (L2 - h11*E) / (3*B0^2)

    % Dipole offset in km
    if SPHOUT
        rO_km = sqrt(eta^2 + zeta^2 + xi^2);
        thO_rad = acos(xi / rO_km);
        phiO_rad = atan2(zeta, eta);
        Odip = Rj * [rO_km, thO_rad, phiO_rad];
    else
        Odip = Rj * [eta, zeta, xi];
    end
    
    rho = r .* sin(theta);
    xS3 = rho .* cos(phi);
    yS3 = rho .* sin(phi);
    zS3 = r .* cos(theta);
    
    % Convert Jupiter Sys3 Cartesian to Jupiter-Solar-Orbital coordinates
    [xJSO, yJSO, zJSO] = JROT_S3CtoJSO(xS3, yS3, zS3, ctimes);
    % Get local solar time
    localTime_rads = atan2(yJSO, xJSO);
    
    % Get Sun angles
    [stheta, sphi, sphase] = JSun(ctimes);

    % Get unit normals of zp axis
    [RNx, RNy, RNz] = csheet_N(xS3, yS3, zS3, localTime_rads, stheta, ctimes);
    
    %% Calculate mapped locations in current sheet coordinates
    % z axis:
    zpx = RNx;
    zpy = RNy;
    zpz = RNz;
    zp = xS3.*zpx + yS3.*zpy + zS3.*zpz;
    % y axis:
    yp1 = sqrt(zpx.^2 + zpy.^2);
    ypx =  zpy ./ yp1;
    ypy = -zpx ./ yp1;
    ypz = zeros(1,npts);
    yp = xS3.*ypx + yS3.*ypy + zS3.*ypz;
    % x axis:
    xpx = ypy.*zpz - ypz.*zpy;
    xpy = ypz.*zpx - ypx.*zpz;
    xpz = ypx.*zpy - ypy.*zpx;
    xp = xS3.*xpx + yS3.*xpy + zS3.*xpz;
    
    % Get derivative grid
	dxpdx = xpx;
	dypdx = ypx;
	dzpdx = zpx;
	dxpdy = xpy;
	dypdy = ypy;
	dzpdy = zpy;
	dxpdz = xpz;
	dypdz = ypz;
	dzpdz = zpz;
        
    % Calculate T matrix
    Txx = (dypdy .* dzpdz - dypdz .* dzpdy);
	Txy = (dxpdz .* dzpdy - dxpdy .* dzpdz);
	Txz = (dxpdy .* dypdz - dxpdz .* dypdy);
	Tyx = (dypdz .* dzpdx - dypdx .* dzpdz);
	Tyy = (dxpdx .* dzpdz - dxpdz .* dzpdx);
	Tyz = (dxpdz .* dypdx - dxpdx .* dypdz);
	Tzx = (dypdx .* dzpdy - dypdy .* dzpdx);
	Tzy = (dxpdy .* dzpdx - dxpdx .* dzpdy);
	Tzz = (dxpdx .* dypdy - dxpdy .* dypdx);
    
    % Get distance from System III equatorial plane to current sheet
    zNS3 = csheet_struc(rho, phi, xJSO, yJSO, localTime_rads, stheta);
    % Get mapped coordinates in current sheet frame
    [rmap, pmap, zmap] = xyz2cyl(xp, yp, zS3 - zNS3);
    
    %% Calculate field at mapped location in cylindrical coordinates
    
    scol = pi/2 - stheta;
    [scolOut, sphiOut] = get_mapped_sunangle(scol, sphi, ...
        xpx,xpy,xpz, ypx,ypy,ypz, zpx,zpy,zpz);
        
    [Brds, Bpds, Bzds] = dipole_shield_cyl_S3(parmod, rmap, pmap, zmap, ...
        sphiOut);
    [Brcs, Bpcs, Bzcs] = tail_mag_notilt(Mode, rmap, pmap, zmap, localTime_rads);
    [Brcss, Bpcss, Bzcss] = tail_mag_shield_cyl_S3(M, Mode, rmap, pmap, zmap, ...
        sphiOut);
        
    % Sum each contribution
    Brmap = Brds + Brcs + Brcss;
    Bpmap = Bpds + Bpcs + Bpcss;
    Bzmap = Bzds + Bzcs + Bzcss;
    
    %% Rotate to cartesian to apply T matrix
    
    [BXcarMap, BYcarMap, BZcarMap] = Bcyl2Bxyz(Brmap, Bpmap, Bzmap, pmap);
    
    Bxfinal = Txx.*BXcarMap + Txy.*BYcarMap + Txz.*BZcarMap;
    Byfinal = Tyx.*BXcarMap + Tyy.*BYcarMap + Tyz.*BZcarMap;
    Bzfinal = Tzx.*BXcarMap + Tzy.*BYcarMap + Tzz.*BZcarMap;
    
    %% Rotate to spherical coordinates to sum VIP4 model vectors
    
    [Brfinal, Bthfinal, Bphifinal] = Bxyz2Bsph(Bxfinal, Byfinal, Bzfinal, theta, phi);
    
    [BrVIP4, BthVIP4, BphiVIP4] = VIP4_no_dipole(r, theta, phi, gVIP4, hVIP4);
    Br = Brfinal + BrVIP4;
    Bth = Bthfinal + BthVIP4;
    Bphi = Bphifinal + BphiVIP4;
    
    %% Adjust for whether each point is inside magnetopause or not
    
    [BrS3IMF, BthS3IMF, BphiS3IMF] = getBIMF(theta, phi, ctimes);
    ptInsideMpause = CheckIfInsideMappedMp(xS3, yS3, zS3, zNS3, ctimes);
    
    Br(ptInsideMpause) = Br(ptInsideMpause) + BrS3IMF(ptInsideMpause);
    Bth(ptInsideMpause) = Bth(ptInsideMpause) + BthS3IMF(ptInsideMpause);
    Bphi(ptInsideMpause) = Bphi(ptInsideMpause) + BphiS3IMF(ptInsideMpause);
    Br(~ptInsideMpause) = BrS3IMF(~ptInsideMpause);
    Bth(~ptInsideMpause) = BthS3IMF(~ptInsideMpause);
    Bphi(~ptInsideMpause) = BphiS3IMF(~ptInsideMpause);
    
    % Convert field vectors to cartesian for output
    if SPHOUT
        Bvec = [Br; Bth; Bphi];
    else
        [Bx, By, Bz] = Bsph2Bxyz(Br, Bth, Bphi, theta, phi);
        Bvec = [Bx; By; Bz];
    end
end


%% Field evaluation functions

function [BrVIP4, BthVIP4, BphiVIP4] = VIP4_no_dipole(r, theta, phi, gVIP4, hVIP4)
% Get magnetic field vectors in System III spherical coordinates for the
% non-dipole multipole moments of the VIP4 model. We omit the dipole
% moments because we have already accounted for them in evaluating the
% shielded dipole magnetosphere model.

    global trueToKK;
    if ~trueToKK
        % Convert distances to Rj_VIP4 to fit with that model
        conv = 71492/71323; r = r * conv;
        Rp_m = 1.0;
        
        % Copied from MagFldJupiter.m
        dVr = 0; dVtheta = 0; dVphi = 0; %radius, colatitude, longitude components
        for n = 2:3  % degree, spherical harmonic index, n = 1 (dipole), n = 2 (quadrupole), n = 3 (octopole)
            for m = 0:n    % order
                A = Rp_m*(Rp_m./r).^(n+1);
                dA = -(n+1)*(Rp_m./r).^(n+2);
                P = LegendreS(n,m,theta);
                dP = (1./r).*dLegendreS(n,m,theta);
                Q = gVIP4(n,m+1)*cos(m*phi) + hVIP4(n,m+1)*sin(m*phi);  % m index of g and h are offset by 1 because MATLAB cannot index 0
                dQ = (1./(r.*sin(theta))) .* (-m*gVIP4(n,m+1)*sin(m*phi) + m*hVIP4(n,m+1)*cos(m*phi));

                dVr = dVr + dA .* P .* Q;
                dVtheta = dVtheta + A .* dP .* Q;
                dVphi = dVphi + A .* P .* dQ;
            end
        end

        BrVIP4 = -dVr;
        BthVIP4 = -dVtheta;
        BphiVIP4 = -dVphi;
        
    else
        % There are definitely simpler ways to perform these calculations,
        % but in the interest of trying to best match Khurana's code, we
        % keep the same overall organization here.
        
        rec = ones(1,91);
        for N=1:13
            N2 = (2*N - 1) * (2*N - 3);
            for M=1:N
                MN = N*(N-1)/2 + M;
                rec(MN) = (N-M) * (N+M-2) / N2;
            end
        end
    
        %        g0n,      g1n,      g2n,      g3n,     g4n
        G = [0,    0,        0, ...
            -0.05100, -0.61900,  0.49700, ...
            -0.01600, -0.52000,  0.24400, -0.17600, ...
            -0.16800,  0.22200, -0.06100, -0.20200, 0.06600, ...
             zeros(1,76)] * 1e5;
        %        h0n,      h1n,      h2n,      h3n,     h4n
        H = [0,    0,        0, ...
                   0, -0.36100,  0.05300, ...
                   0, -0.08800,  0.40800, -0.31600, ...
                   0,  0.07600,  0.40400, -0.16600, 0.03900, ...
             zeros(1,76)] * 1e5;
        S = 1;
        for N=2:13
            MN = N*(N-1)/2 + 1;
            S = S * (2*N-3) / (N-1);
            G(MN) = G(MN)*S;
            H(MN) = H(MN)*S;
            P = S;
            for M=2:N
                AA = 1;
                if M==2
                    AA = 2;
                end
                P = P * sqrt(AA * (N-M+1)/(N+M-2));
                MNN = MN + M - 1;
                G(MNN) = G(MNN) * P;
                H(MNN) = H(MNN) * P;
            end
        end

        PP = 1 ./ r;
        P = PP;
        [A, B] = deal(zeros(5, length(r)));
        for N=1:5
            P = P .* PP;
            A(N,:) = P;
            B(N,:) = P * N;
        end

        cos_phi = cos(phi);
        sin_phi = sin(phi);
        cos_th = cos(theta);
        sin_th = sin(theta);
        
        % Initialize working variables
        P = ones(size(r));
        [D, BBR, BBT, BBF] = deal(zeros(size(r)));
        
        for M=1:5
            if M == 1
                X = zeros(size(r));
                Y = ones(size(r));
            else
                MM = M - 1;
                W = X;
                X = W.*cos_phi + Y.*sin_phi;
                Y = Y.*cos_phi - W.*sin_phi;
            end

            Q = P;
            Z = D;
            [BI, P2, D2] = deal(zeros(size(r)));
            
            for N=M:5
                MN = N*(N-1)/2 + M;
                W = G(MN)*Y + H(MN)*X;

                P2(abs(P2) < 1e-38) = 0;
                Q(abs(Q) < 1e-38) = 0;

                BBR = BBR + B(N,:).*W.*Q;
                BBT = BBT - A(N,:).*W.*Z;

                if M ~= 1
                    QQ = Q;
                    QQ(sin_th < 1e-5) = Z(sin_th < 1e-5);
                    BI = BI + A(N,:).*QQ .* (G(MN)*X - H(MN)*Y);
                end
                DP = cos_th.*Z - sin_th.*Q - rec(MN)*D2;
                PM = cos_th.*Q - rec(MN).*P2;
                D2 = Z;
                P2 = Q;
                Z = DP;
                Q = PM;
            end

            D = sin_th.*D + cos_th.*P;
            P = sin_th .* P;

            if M ~= 1
                BI = BI * MM;
                BBF = BBF + BI;
            end
        end

        BrVIP4 = BBR;
        BthVIP4 = BBT;
        BphiVIP4 = BBF;
        BphiVIP4(sin_th > 1e-5) = BBF(sin_th > 1e-5) ./ sin_th(sin_th > 1e-5);
        BphiVIP4((sin_th < 1e-5) & (cos_th < 0)) = -BBF((sin_th < 1e-5) & (cos_th < 0));
    end
end


function [stheta, sphi, sphase] = JSun(ctimes)
% Calculate the direction and phase angle from Jupiter to the Sun
% as a function of ctime, seconds past midnight Jan 1, 1966.

    % Initialize outputs and working variables
    % fphi is phi in Jupiter fixed (non-rotating) coordinates, in degrees
    [stheta, fphi] = deal(zeros(size(ctimes)));

    [yrJup, omegaJ, omegayr, etime1, obliq, tan_ob, ...
        aa, bb, deltaPhi] = JSunCoeffs();
    yrSec = 365.25 * 86400;
    
    t = etimer(ctimes) - etime1;
    x = [cos(omegayr   * t); ...
         sin(omegayr   * t); ...
         cos(2*omegayr * t); ...
         sin(2*omegayr * t); ...
        (t / yrSec).^2; ...
         t / yrSec; ...
         ones(1, length(t))];
     
    for j=1:7
        fphi   =   fphi + bb(j) * x(j,:);
        stheta = stheta + aa(j) * x(j,:);
    end
     
    % Now rotate to Jupiter System III
    % Start with Jupiter orbital motion
    fphi = mod(fphi + t/yrJup*360, 360);
    % Add Jupiter sidereal rotation
    sphi = mod(fphi - t*omegaJ, 360);
    % Convert both angles to radians
    stheta = deg2rad(stheta);
    sphi = deg2rad(sphi);

    % Adjust angles near the magnetotail
    stheta(stheta >= obliq) = obliq;
    % MJS note: I don't think stheta should be able to be negative, so I
    % think the following line is unnecessary.
    stheta(-stheta >= obliq) = -obliq;

    % Now calculate orbital/solar phase (sphase)
    phi21 = mod(sphi + pi + acos(tan(stheta) / tan_ob), 2*pi);
    phi22 = mod(sphi + pi - acos(tan(stheta) / tan_ob), 2*pi);
    dphi = deg2rad(fphi + deltaPhi);
    phi2b = mod(sphi - dphi, 2*pi);

    sphase = phi21;
    dif1 = abs(phi21 - phi2b);
    dif2 = abs(phi22 - phi2b);
    tf = deg2rad(350);
    dif1(dif1 > tf) = 2*pi - dif1(dif1 > tf);
    dif2(dif2 > tf) = 2*pi - dif2(dif2 > tf);
    sphase(dif1 > dif2) = phi22(dif1 > dif2);
end


function [RNx, RNy, RNz] = csheet_N(xS3, yS3, zS3, RLT, stheta, ctimes)
% Get unit normals of current sheet axes

    delta = 0.1;
    xp = xS3 + delta;
    xm = xS3 - delta;
    yp = yS3 + delta;
    ym = yS3 - delta;
    
    % First calculate x derivatives
    rhop = sqrt(xp.^2 + yS3.^2);
    rhom = sqrt(xm.^2 + yS3.^2);
    phip = atan2(yS3, xp);
    phim = atan2(yS3, xm);
    [xJSOp, yJSOp, ~] = JROT_S3CtoJSO(xp, yS3, zS3, ctimes);
    [xJSOm, yJSOm, ~] = JROT_S3CtoJSO(xm, yS3, zS3, ctimes);
    
    zNS3p = csheet_struc(rhop, phip, xJSOp, yJSOp, RLT, stheta);
    zNS3m = csheet_struc(rhom, phim, xJSOm, yJSOm, RLT, stheta);
    dzdx = (zNS3p - zNS3m) / (2*delta);
    
    % Now calculate y derivatives
    rhop = sqrt(xS3.^2 + yp.^2);
    rhom = sqrt(xS3.^2 + ym.^2);
    phip = atan2(yp, xS3);
    phim = atan2(ym, xS3);
    [xJSOp, yJSOp, ~] = JROT_S3CtoJSO(xS3, yp, zS3, ctimes);
    [xJSOm, yJSOm, ~] = JROT_S3CtoJSO(xS3, ym, zS3, ctimes);
    
    zNS3p = csheet_struc(rhop, phip, xJSOp, yJSOp, RLT, stheta);
    zNS3m = csheet_struc(rhom, phim, xJSOm, yJSOm, RLT, stheta);
    dzdy = (zNS3p - zNS3m) / (2*delta);   
        
    RN = sqrt(dzdx.^2 + dzdy.^2 + 1);
    RNx = -dzdx ./ RN;
    RNy = -dzdy ./ RN;
    RNz = 1 ./ RN;
end


function zNS3 = csheet_struc(rho, phi, xJSO, yJSO, RLT, stheta)
% Get distance of the current sheet from the System III equatorial plane

    % Retrieve current sheet parameterization
    [period, omegaJ_deghr, X0, phip0, obliq, incl_solar, C, psi2, psi4] ...
    = CsheetStrucCoeffs();

    % Avoid zero values in x
    xJSO(abs(xJSO) < 1e-9 & xJSO > 0) =  1e-9;
    xJSO(abs(xJSO) < 1e-9 & xJSO < 0) = -1e-9;
    
    % Calculate transformation parameters
    Alfven = -360 ./ (period * (C(4)*cos(RLT - psi4) + C(5)) );
    delay1 = C(1)*rho + 0.5*C(2)*rho.^2.*cos(RLT - psi2) + 0.5*C(3)*rho.^2;
    delay2 = rho ./ Alfven * omegaJ_deghr * pi/180;
    phip = phip0 - delay1 - delay2;
    poleOffsetMax = obliq + incl_solar;
    rho1 = sqrt((X0*tanh(xJSO/X0)).^2 + yJSO.^2);
    
    % Calculate distance from sheet to equatorial plane
    zNS3 = rho1*tan(poleOffsetMax).*cos(phi - phip) + ...
           xJSO.*(1 - tanh(abs(X0./xJSO))).*tan(stheta);
end


function [sthetaOut, sphiOut] = get_mapped_sunangle(stheta, sphi, ...
        xpx,xpy,xpz, ypx,ypy,ypz, zpx,zpy,zpz)
% Get angle to Sun in current sheet coordinates
    [xin, yin, zin] = sph2xyz(1, stheta, sphi);
    xout = xin.*xpx + yin.*xpy + zin.*xpz;
    yout = xin.*ypx + yin.*ypy + zin.*ypz;
    zout = xin.*zpx + yin.*zpy + zin.*zpz;
    [~, sthetaOut, sphiOut] = xyz2sph(xout, yout, zout);
end


function [Brds, Bpds, Bzds] = dipole_shield_cyl_S3(parmod, ...
    rmap, pmap, zmapin, sphi)
% Get dipole shield (?) field in cylindrical JS3 coordinates

    % Get mapped cartesian coords
    [xmap, ymap, zmap] = cyl2xyz(rmap, pmap, zmapin);
    % Transform to pseudo-JSO position
    [xpJSO, ypJSO, zpJSO] = xyz2pJSO(xmap, ymap, zmap, sphi);
    % Get shielded dipole in pseudo-JSO coordinates
    [BxpJSO, BypJSO, BzpJSO] = dipole_shielded(parmod, xpJSO, ypJSO, zpJSO);
    % Transform psuedo-JSO field vectors to JS3
    [Bx, By, Bz] = BpJSO2Bxyz(BxpJSO, BypJSO, BzpJSO, sphi);
    % Transform to cylindrical for output
    [Brds, Bpds, Bzds] = Bxyz2Bcyl(Bx, By, Bz, pmap);
end


function [BxpJSO, BypJSO, BzpJSO] = dipole_shielded(parmod, ...
    xpJSO, ypJSO, zpJSO)
% Get shielded dipole field in pseudo-JSO coordinates

    psir = parmod(1);
    B0 = parmod(2);
    Nmodes = parmod(3);
    
    % In JSM coordinates, the dipole axis is always in the xz plane. In JSO
    % and pJSO coordinates, the Jupiter spin axis and the Sun are in the xz
    % plane, so this definition seems inconsistent with the frame choice.
    B0x = B0 * sind(psir);
    B0y = 0;
    B0z = B0 * cosd(psir);
    % Get dipole field
    [Bxd, Byd, Bzd] = dipole(xpJSO, ypJSO, zpJSO, B0x, B0y, B0z);
    
    % Get B from magnetopause
    phi = atan2(zpJSO, ypJSO);
    rho = ypJSO .* cos(phi) + zpJSO .* sin(phi);
    [Brho2, Bphi2, Bx2] = B_mp_perp(rho, phi, xpJSO, Nmodes);
    
    % Rotate and combine
    By2 = Brho2 .* cos(phi) - Bphi2 .* sin(phi);
    Bz2 = Brho2 .* sin(phi) + Bphi2 .* cos(phi);
    
    BxpJSO = Bxd + Bx2;
    BypJSO = Byd + By2;
    BzpJSO = Bzd + Bz2;
end


function [Bxd, Byd, Bzd] = dipole(x, y, z, B0x, B0y, B0z)
% Calculate dipole field as a function of position and dipole components
    global trueToKK;
    if ~trueToKK
        % Convert distances to Rj_VIP4 to fit with that model
        conv = 71492/71323; x = x * conv; y = y * conv; z = z * conv;
    end
    
    r = sqrt(x.^2 + y.^2 + z.^2);
	a11 = (3*x.^2 - r.^2) ./ r.^5;
	a12 = (3*x.*y) ./ r.^5;
	a13 = (3*x.*z) ./ r.^5;
	a21 = (3*x.*y) ./ r.^5;
	a22 = (3*y.^2 - r.^2) ./ r.^5;
	a23 = (3*y.*z) ./ r.^5;
	a31 = (3*x.*z) ./ r.^5;
	a32 = (3*y.*z) ./ r.^5;
	a33 = (3*z.^2 - r.^2) ./ r.^5;
	Bxd = a11.*B0x + a12.*B0y + a13.*B0z;
	Byd = a21.*B0x + a22.*B0y + a23.*B0z;
	Bzd = a31.*B0x + a32.*B0y + a33.*B0z;
end


function [Brcs, Bpcs, Bzcs] = tail_mag_notilt(Mode, ...
    rho, phi, z, localTime_rads)
% Get magnetotail field in current sheet coordinates

    % Initialize outputs
    [Brcs, Bzcs] = deal(zeros(size(rho)));

    % Retrieve current sheet deformation model parameters
    [C, P, D0, D1, D, f, beta] = CSdeformCoeffs();
    
    % Get loop iteration for specified mode(s)
    if Mode < 7
        Modes = Mode:Mode;
    else
        Modes = 1:6;
    end
    
    drho = 0.05;
    dz = 0.05;
    
    for L=Modes
        zm = abs(z - dz);
        zp = abs(z + dz);
        % Adjust positions within current sheet half-thickness D
        zm(zm < D) = 0.5 * (D + zm(zm < D).^2/D);
        zp(zp < D) = 0.5 * (D + zp(zp < D).^2/D);
        
        % (Re-)initialize working variables
        [xlpp, xlpm] = deal(zeros(size(rho)));
    
        for i=1:6
            S1p = sqrt((beta(L,i) + zp).^2 + (rho + beta(L,i)).^2);
            S2p = sqrt((beta(L,i) + zp).^2 + (rho - beta(L,i)).^2);
            S1m = sqrt((beta(L,i) + zm).^2 + (rho + beta(L,i)).^2);
            S2m = sqrt((beta(L,i) + zm).^2 + (rho - beta(L,i)).^2);
            
            tp = 2*beta(L,i) ./ (S1p + S2p);
            tm = 2*beta(L,i) ./ (S1m + S2m);
            
            AAp = tp .* sqrt(1 - tp.^2) ./ (S1p .* S2p);
            AAm = tm .* sqrt(1 - tm.^2) ./ (S1m .* S2m);
            
            xlpp = xlpp + f(L,i) * AAp .* rho;
            xlpm = xlpm + f(L,i) * AAm .* rho;
        end
        
        Brcs = Brcs - (xlpp - xlpm) / (2*dz) * C(L);
    end
    
    for L=Modes
        rhom = rho - drho;
        rhop = rho + drho;
        % Simplifying from Khurana's code, zp and zm are used there with 
        % dz = 0 for both. We just use zabs instead.
        zabs = abs(z);
        % Adjust positions within current sheet half-thickness D
        zabs(zabs < D) = 0.5 * (D + zabs(zabs < D).^2/D);
        
        % (Re-)initialize working variables
        [xlpp, xlpm] = deal(zeros(size(rho)));
        
        for i=1:6
            S1p = sqrt((beta(L,i) + zabs).^2 + (rhop + beta(L,i)).^2);
            S2p = sqrt((beta(L,i) + zabs).^2 + (rhop - beta(L,i)).^2);
            S1m = sqrt((beta(L,i) + zabs).^2 + (rhom + beta(L,i)).^2);
            S2m = sqrt((beta(L,i) + zabs).^2 + (rhom - beta(L,i)).^2);
            
            tp = 2*beta(L,i) ./ (S1p + S2p);
            tm = 2*beta(L,i) ./ (S1m + S2m);
            AAp = tp .* sqrt(1 - tp.^2) ./ (S1p .* S2p);
            AAm = tm .* sqrt(1 - tm.^2) ./ (S1m .* S2m);
            xlpp = xlpp + f(L,i) * AAp .* rhop;
            xlpm = xlpm + f(L,i) * AAm .* rhom;
        end
        
        Bzcs = Bzcs + (rhop.*xlpp - rhom.*xlpm) / (2*drho) ./ rho * C(L);
    end
    
    % Calculate Bphi from stretching parameter and radial field comp
    Bpcs = - P * rho .* Brcs;
end


function [Brcss, Bpcss, Bzcss] = tail_mag_shield_cyl_S3(M, Mode, ...
    rmap, pmap, zmap, sphi)
% Get magnetotail shield field in cylindrical JS3 coordinates

    % Rotate from cylindrical to cartesian in current sheet coordinates
    [xcs, ycs, zcs] = cyl2xyz(rmap, pmap, zmap);
    % MJS note: Khurana's code changes to xJSO, etc. here instead of S3.
    % I think the pseudo- part comes in because we are rotating the xz
    % plane to include the Sun, like in JSO coordinates, but the current
    % sheet cylindrical coordinate system is rotated about the x axis
    % relative to the standard JSO coordinates.
    % Rotate to pJSO coordinates
    [xpJSO, ypJSO, zpJSO] = xyz2pJSO(xcs, ycs, zcs, sphi);
    
    % Get shielded magnetotail field
    [BxpJSO, BypJSO, BzpJSO] = B_tail_shield(M, Mode, xpJSO, ypJSO, zpJSO);
    % Rotate to System III cartesian
    [Bxcs, Bycs, Bzcs] = BpJSO2Bxyz(BxpJSO, BypJSO, BzpJSO, sphi);
    % Rotate back to cylindrical for output
    [Brcss, Bpcss, Bzcss] = Bxyz2Bcyl(Bxcs, Bycs, Bzcs, pmap);
end


function [BxJSO, ByJSO, BzJSO] = B_tail_shield(M, Mode, xJSO, yJSO, zJSO)
% Get magnetotail contribution to shielded dipole field

    % Initialize output
    [BxJSO, ByJSO, BzJSO] = deal(zeros(size(xJSO)));

    % Get loop counter from Mode input
    if Mode < 7
        Modes = Mode:Mode;
    else
        Modes = 1:6;
    end

    % Coefficient tables are scaled against distances in units of 100 Rj --
    % scale input coordinates to match
    x = xJSO/100;
    y = yJSO/100;
    z = zJSO/100;
    
    xp = x + 0.001;
	xm = x - 0.001;
	yp = y + 0.001;
	ym = y - 0.001;
	zp = z + 0.001;
	zm = z - 0.001;
        
    % Fetch coefficients
    CS = CsheetCoeffs();
    [a, c, p, r] = MtailCoeffs();
    [ain, cin] = deal(zeros(M, M));
    
    % Collect a and c values for the specified mode(s)
    for thisMode=Modes
        icount = 0;
        for ii=1:M
            for kk=1:M
                icount = icount+1;
                ain(ii,kk) = a(thisMode,icount);
                cin(ii,kk) = c(thisMode,icount);
            end
        end
        
        % Calculate magnetic potentials and take the gradient to get Bvec
        Up = Upot(xp, y, z, ain, cin, p(thisMode,:), r(thisMode,:), M);
        Um = Upot(xm, y, z, ain, cin, p(thisMode,:), r(thisMode,:), M);
        Bx = -(Up - Um) / 0.002;
        
        Up = Upot(x, yp, z, ain, cin, p(thisMode,:), r(thisMode,:), M);
        Um = Upot(x, ym, z, ain, cin, p(thisMode,:), r(thisMode,:), M);
        By = -(Up - Um) / 0.002;
        
        Up = Upot(x, y, zp, ain, cin, p(thisMode,:), r(thisMode,:), M);
        Um = Upot(x, y, zm, ain, cin, p(thisMode,:), r(thisMode,:), M);
        Bz = -(Up - Um) / 0.002;
        
        Bx = Bx * CS(thisMode);
        By = By * CS(thisMode);
        Bz = Bz * CS(thisMode);
        
        BxJSO = BxJSO + Bx;
        ByJSO = ByJSO + By;
        BzJSO = BzJSO + Bz;
    end
    
    % Negate for output
    BxJSO = -BxJSO;
    ByJSO = -ByJSO;
    BzJSO = -BzJSO;
end


function U = Upot(x, y, z, a, c, p, r, M)
% Calculates magnetic potential terms from model coefficients

    % Initialize output
    U = zeros(size(x));

    M2 = 2*M;
    ix = 1;
    
    % Calculate a/p terms and add into U
    for i=1:M
        for k=(M+1):M2
            T = exp(sqrt(1/p(i)^2 + 1/p(k)^2) * x) .* cos(y/p(i)) .* sin(z/p(k));
            U = U + a(i, k-M) * T;
            ix = ix + 1;
        end
    end
    
    % Calculate c/r terms and sum with a/p terms
    for i=1:M
        for k=(M+1):M2
            T = exp(sqrt(1/r(i)^2 + 1/r(k)^2) * x) .* sin(y/r(i)) .* sin(z/r(k));
            U = U + c(i, k-M) * T;
            ix = ix + 1;
        end
    end
    
end


function [Bperpr, Bperpf, Bperpx] = B_mp_perp(rho, phi, x, Nmodes)
% Get magnetic field components perpendicular to the magnetopause boundary

    % Get model parameters
    [A, B] = MpauseCoeffs();
      
    Modes1 = Nmodes;
    Modes2 = 2 * Modes1;
    Modes3 = 3 * Modes1;
    Modes4 = 4 * Modes1;
    Modes5 = 5 * Modes1;
      
    % Initialize
    [Bperpr, Bperpf, Bperpx] = deal(zeros(size(rho)));
    
    rhom = rho - 0.1;
	rhop = rho + 0.1;
	phim = phi - 0.001;
	phip = phi + 0.001;
	phi2 = 2*phi;
	phi2m = 2*phi - 0.001;
	phi2p = 2*phi + 0.001;
	phi3 = 3*phi;
	phi3m = 3*phi - 0.001;
	phi3p = 3*phi + 0.001;
	xm = x - 0.1;
	xp = x + 0.1;
	sinf = sin(phi);
	cosf = cos(phi);
	sin2f = sin(phi2);
	cos2f = cos(phi2);
	sin3f = sin(phi3);
	cos3f = cos(phi3);
    sinp = sin(phip);
    cosp = cos(phip);
    sinm = sin(phim);
    cosm = cos(phim);
    sin2p = sin(phi2p);
    cos2p = cos(phi2p);
    sin2m = sin(phi2m);
    cos2m = cos(phi2m);
    sin3p = sin(phi3p);
    cos3p = cos(phi3p);
    sin3m = sin(phi3m);
    cos3m = cos(phi3m);
    
    % Calculate phi terms
    KA = 1;
    for KB=1:Modes1
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(1, rhop / B(KB)) .* expx .* sinf;
        Uperpm = besselj(1, rhom / B(KB)) .* expx .* sinf;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(1, rho / B(KB)) .* expx .* sinp;
        Uperpm = besselj(1, rho / B(KB)) .* expx .* sinm;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(1, rho / B(KB)) .* expp .* sinf;
        Uperpm = besselj(1, rho / B(KB)) .* expm .* sinf;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Next set of A(KA) values for phi terms
    for KB=1:Modes1
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(1, rhop / B(KB)) .* expx .* cosf;
        Uperpm = besselj(1, rhom / B(KB)) .* expx .* cosf;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(1, rho / B(KB)) .* expx .* cosp;
        Uperpm = besselj(1, rho / B(KB)) .* expx .* cosm;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(1, rho / B(KB)) .* expp .* cosf;
        Uperpm = besselj(1, rho / B(KB)) .* expm .* cosf;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Now calculate 2*phi terms
    for KB=(Modes1+1):Modes2
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(2, rhop / B(KB)) .* expx .* sin2f;
        Uperpm = besselj(2, rhom / B(KB)) .* expx .* sin2f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(2, rho / B(KB)) .* expx .* sin2p;
        Uperpm = besselj(2, rho / B(KB)) .* expx .* sin2m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(2, rho / B(KB)) .* expp .* sin2f;
        Uperpm = besselj(2, rho / B(KB)) .* expm .* sin2f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Next set of A(KA) values for 2*phi terms
    for KB=(Modes1+1):Modes2
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(2, rhop / B(KB)) .* expx .* cos2f;
        Uperpm = besselj(2, rhom / B(KB)) .* expx .* cos2f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(2, rho / B(KB)) .* expx .* cos2p;
        Uperpm = besselj(2, rho / B(KB)) .* expx .* cos2m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(2, rho / B(KB)) .* expp .* cos2f;
        Uperpm = besselj(2, rho / B(KB)) .* expm .* cos2f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Now calculate 3*phi terms
    for KB=(Modes2+1):Modes3
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(3, rhop / B(KB)) .* expx .* sin3f;
        Uperpm = besselj(3, rhom / B(KB)) .* expx .* sin3f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(3, rho / B(KB)) .* expx .* sin3p;
        Uperpm = besselj(3, rho / B(KB)) .* expx .* sin3m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(3, rho / B(KB)) .* expp .* sin3f;
        Uperpm = besselj(3, rho / B(KB)) .* expm .* sin3f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Next set of A(KA) values for 3*phi terms
    for KB=(Modes2+1):Modes3
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        Uperpp = besselj(3, rhop / B(KB)) .* expx .* cos3f;
        Uperpm = besselj(3, rhom / B(KB)) .* expx .* cos3f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        
        Uperpp = besselj(3, rho / B(KB)) .* expx .* cos3p;
        Uperpm = besselj(3, rho / B(KB)) .* expx .* cos3m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        
        Uperpp = besselj(3, rho / B(KB)) .* expp .* cos3f;
        Uperpm = besselj(3, rho / B(KB)) .* expm .* cos3f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Now calculate terms associated with derivative term and sin(phi)
    for KB=(Modes3+1):Modes4
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        rhob = rho / B(KB);
        besj0 = besselj(0, rhob);
        besj1 = besselj(1, rhob);
        Term1 = rhop.*besselj(0, rhop/B(KB)) + (x - B(KB)).*besselj(1, rhop/B(KB));
        Term2 = rhom.*besselj(0, rhom/B(KB)) + (x - B(KB)).*besselj(1, rhom/B(KB));
        Term3 = expx .* (rho.*besj0 + (x - B(KB)).*besj1);
        Term4 = expp .* (rho.*besj0 + (xp - B(KB)).*besj1);
        Term5 = expm .* (rho.*besj0 + (xm - B(KB)).*besj1);
        
        Uperpp = Term1 .* expx .* sinf;
        Uperpm = Term2 .* expx .* sinf;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        Uperpp = Term3 .* sinp;
        Uperpm = Term3 .* sinm;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        Uperpp = Term4 .* sinf;
        Uperpm = Term5 .* sinf;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Now the same for derivative term and cos(phi)
    for KB=(Modes3+1):Modes4
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        rhob = rho / B(KB);
        besj0 = besselj(0, rhob);
        besj1 = besselj(1, rhob);
        Term1 = rhop.*besselj(0, rhop/B(KB)) + (x - B(KB)).*besselj(1, rhop/B(KB));
        Term2 = rhom.*besselj(0, rhom/B(KB)) + (x - B(KB)).*besselj(1, rhom/B(KB));
        Term3 = expx .* (rho.*besj0 + (x - B(KB)).*besj1);
        Term4 = expp .* (rho.*besj0 + (xp - B(KB)).*besj1);
        Term5 = expm .* (rho.*besj0 + (xm - B(KB)).*besj1);
        
        Uperpp = Term1 .* expx .* cosf;
        Uperpm = Term2 .* expx .* cosf;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        Uperpp = Term3 .* cosp;
        Uperpm = Term3 .* cosm;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        Uperpp = Term4 .* cosf;
        Uperpm = Term5 .* cosf;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Now calculate terms associated with 2nd derivative term and sin(phi),
    % or something like that
    for KB=(Modes4+1):Modes5
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        rhob = rho / B(KB);
        besj2 = besselj(2, rhob);
        besj3 = besselj(3, rhob);
        Term1 = rhop.*besselj(2, rhop/B(KB)) + (x - 3*B(KB)).*besselj(3, rhop/B(KB));
        Term2 = rhom.*besselj(2, rhom/B(KB)) + (x - 3*B(KB)).*besselj(3, rhom/B(KB));
        Term3 = expx .* (rho.*besj2 + (x - 3*B(KB)).*besj3);
        Term4 = expp .* (rho.*besj2 + (xp - 3*B(KB)).*besj3);
        Term5 = expm .* (rho.*besj2 + (xm - 3*B(KB)).*besj3);
        
        Uperpp = Term1 .* expx .* sin3f;
        Uperpm = Term2 .* expx .* sin3f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        Uperpp = Term3 .* sin3p;
        Uperpm = Term3 .* sin3m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        Uperpp = Term4 .* sin3f;
        Uperpm = Term5 .* sin3f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Same for cos(phi)
    for KB=(Modes4+1):Modes5
        expx = exp(x / B(KB));
        expp = exp(xp / B(KB));
        expm = exp(xm / B(KB));
        rhob = rho / B(KB);
        besj2 = besselj(2, rhob);
        besj3 = besselj(3, rhob);
        Term1 = rhop.*besselj(2, rhop/B(KB)) + (x - 3*B(KB)).*besselj(3, rhop/B(KB));
        Term2 = rhom.*besselj(2, rhom/B(KB)) + (x - 3*B(KB)).*besselj(3, rhom/B(KB));
        Term3 = expx .* (rho.*besj2 + (x - 3*B(KB)).*besj3);
        Term4 = expp .* (rho.*besj2 + (xp - 3*B(KB)).*besj3);
        Term5 = expm .* (rho.*besj2 + (xm - 3*B(KB)).*besj3);
        
        Uperpp = Term1 .* expx .* cos3f;
        Uperpm = Term2 .* expx .* cos3f;
        Bperpr = Bperpr - A(KA)/0.2 * (Uperpp - Uperpm);
        Uperpp = Term3 .* cos3p;
        Uperpm = Term3 .* cos3m;
        Bperpf = Bperpf - A(KA)./(0.002*rho) .* (Uperpp - Uperpm);
        Uperpp = Term4 .* cos3f;
        Uperpm = Term5 .* cos3f;
        Bperpx = Bperpx - A(KA)/0.2 * (Uperpp - Uperpm);
        
        KA = KA + 1;
    end
    
    % Negate for output
    Bperpr = -Bperpr;
    Bperpf = -Bperpf;
    Bperpx = -Bperpx;
end


function [BrS3IMF, BthS3IMF, BphiS3IMF] = getBIMF(theta, phi, ctimes)
% Get IMF in JS3 spherical coordinates

    [eps1, eps2, ByConst, BzConst] = BIMFcoeffs();
    % Get IMF clock angle
    clockAng = atan2(ByConst, BzConst);
    cMultFact = eps1 + eps2*cos(clockAng/2)^2;
    
    % Get IMF in JSM coords
    BxIMF = zeros(size(ctimes));
    ByIMF = cMultFact * ByConst * ones(size(ctimes));
    BzIMF = cMultFact * BzConst * ones(size(ctimes));
    
    % Rotate from JSM to System III cartesian
    [BxS3IMF, ByS3IMF, BzS3IMF] = JROT_JSMtoS3C(BxIMF, ByIMF, BzIMF, ctimes);
    % Rotate from cartesian to spherical
    [BrS3IMF, BthS3IMF, BphiS3IMF] = Bxyz2Bsph(BxS3IMF, ByS3IMF, BzS3IMF, theta, phi);
end


function ptInsideMpause = CheckIfInsideMp(xJSM, yJSM, zJSM)
% Return logical array indicating whether each point is inside the unmapped
% magnetopause.
% MJS note: In Khurana's code, this function is split into day- and
% night-side calculations, but everything being done for each has identical
% results. There are even typos copy-pasted between the two blocks (Fortran
% is not case-sensitive so the typos are harmless here). I don't see how 
% or why there is any separate handling there.

    % Initialize
    ptInsideMpause = ones(size(xJSM));
    % Dynamic pressure
    DP = 0.04;
    % Symmetric magnetopause parameters
    A =   13779.154626782700000;
	B =    -130.046991164773700;
	C = -2.216972473764874D-001;
	D =  0.000000000000000D+000;
	E = -8.453162863101464D-001;
	F =  0.000000000000000D+000;
    
    phi = atan2(zJSM, yJSM);
    rho_in = sqrt(zJSM.^2 + yJSM.^2);
    
    % Calculate numbers needed to determine magnetopause distance
    aa = E.*cos(phi).^2 - sin(phi).^2 + F.*cos(phi).*sin(phi);
    bb = D.*cos(phi);
    cc = A + B.*xJSM + C.*xJSM.^2;
    term = bb.^2 - 4*aa.*cc;
    rho1 = (-bb + sqrt(term)) ./ (2*aa);
    rho2 = (-bb - sqrt(term)) ./ (2*aa);
    rho = zeros(size(aa));
    rho(rho2 > rho1) = rho2(rho2 > rho1);
    rho(~(rho2 > rho1)) = rho1(~(rho2 > rho1));
    
    % Set result for bounding terms
    ptInsideMpause(term < 0) = 0;
    ptInsideMpause(rho < 0) = 0;
    ptInsideMpause(rho_in > rho) = 0;
end


function ptInsideMpause = CheckIfInsideMappedMp(xS3, yS3, zS3, zNS3, ctimes)
% Return logical array indicating whether each point is inside the mapped
% magnetopause.
    [xJSM, yJSM, zJSM] = JROT_S3CtoJSM(xS3, yS3, zS3+zNS3, ctimes);
    ptInsideMpause = CheckIfInsideMp(xJSM, yJSM, zJSM);
end


%% Coordinate transformation functions

function [xJSO, yJSO, zJSO] = JROT_S3CtoJSO(xS3C, yS3C, zS3c, ctimes)
% Rotate Jupiter System 3 cartesian vectors into Jupiter-Sun-Orbital coordinates
    
    global trueToKK;
    if ~trueToKK
        ets = ctime2et(ctimes);
        rot = cspice_pxform('IAU_JUPITER', 'JUNO_JSO', ets);
    else
        % Initialize rotation matrices
        rot = zeros(3,3, length(ctimes));
        % First, get xJSO basis vector orientation
        [stheta, sphi, sphase] = JSun(ctimes);
        rot(1,1,:) = cos(stheta) .* cos(sphi);
        rot(1,2,:) = cos(stheta) .* sin(sphi);
        rot(1,3,:) = sin(stheta);
        % Next, get the zJSO axis from the obliquity
        % Retrieve obliquity angle
        [~, ~, ~, ~, obliq, ~, ~, ~, ~] = JSunCoeffs;
        rot(3,1,:) = sin(obliq) * cos(sphase);
        rot(3,2,:) = sin(obliq) * sin(sphase);
        rot(3,3,:) = cos(obliq);
        % Now get the yJSO axis from Z x X
        rot(2,1,:) = rot(3,2,:) .* rot(1,3,:) - rot(3,3,:) .* rot(1,2,:);
        rot(2,2,:) = rot(3,3,:) .* rot(1,1,:) - rot(3,1,:) .* rot(1,3,:);
        rot(2,3,:) = rot(3,1,:) .* rot(1,2,:) - rot(3,2,:) .* rot(1,1,:);
    end
    
    posIn = [xS3C; yS3C; zS3c];
    posOut = zeros(size(posIn));
    for i=1:length(ctimes)
        posOut(:,i) = rot(:,:,i) * posIn(:,i);
    end
    xJSO = posOut(1,:);
    yJSO = posOut(2,:);
    zJSO = posOut(3,:);
end


function [xJSM, yJSM, zJSM] = JROT_S3CtoJSM(xS3C, yS3C, zS3c, ctimes)
% Rotate Jupiter System 3 cartesian vectors into Jupiter-Sun-Magnetic coordinates

    global trueToKK;
    if ~trueToKK
        % MJS note: The juno_v12 frames kernel does not have a definition 
        % for the JSM frame. I created frame definitions for the dipole
        % coordinate system (JUNO_JMAG_O4) as described in the following:
        % https://lasp.colorado.edu/home/mop/files/2015/02/CoOrd_systems12.pdf.
        % This document incorrectly describes this frame as equivalent to
        % JSM. I also created a JUNO_JSM frame definition based on the
        % frames kernels required reading and the JSM description at
        % https://pds.nasa.gov/ds-view/pds/viewProfile.jsp?dsid=GO-J-POS-6-SC-TRAJ-JUP-COORDS-V1.0
        ets = ctime2et(ctimes);
        rot = cspice_pxform('IAU_JUPITER', 'JUNO_JSM', ets);
    else
        % Retrieve dipole orientation and initialize rotation matrices
        dipole = JSMdipoleCoeffs();
        rot = zeros(3,3, length(ctimes));

        % Construct rotation matrix with the JSM basis vectors as rows of
        % the matrix
        % First, get xJSM basis vector orientation
        [stheta, sphi, ~] = JSun(ctimes);
        rot(1,1,:) = cos(stheta) .* cos(sphi);
        rot(1,2,:) = cos(stheta) .* sin(sphi);
        rot(1,3,:) = sin(stheta);
        % Next get yJSM as Mdip x xJSM
        rot(2,1,:) = rot(1,3,:) * dipole(3,2) - rot(1,2,:) * dipole(3,3);
        rot(2,2,:) = rot(1,1,:) * dipole(3,3) - rot(1,3,:) * dipole(3,1);
        rot(2,3,:) = rot(1,2,:) * dipole(3,1) - rot(1,1,:) * dipole(3,2);
        denom = sqrt(rot(2,1,:).^2 + rot(2,2,:).^2 + rot(2,3,:).^2);
        rot(2,1,:) = rot(2,1,:) ./ denom;
        rot(2,2,:) = rot(2,2,:) ./ denom;
        rot(2,3,:) = rot(2,3,:) ./ denom;
        % Finally, get zJSM as xJSM x yJSM
        rot(3,1,:) = rot(1,2,:) .* rot(2,3,:) - rot(1,3,:) .* rot(2,2,:);
        rot(3,2,:) = rot(1,3,:) .* rot(2,1,:) - rot(1,1,:) .* rot(2,3,:);
        rot(3,3,:) = rot(1,1,:) .* rot(2,2,:) - rot(1,2,:) .* rot(2,1,:);
    end
    
    posIn = [xS3C; yS3C; zS3c];
    posOut = zeros(size(posIn));
    for i=1:length(ctimes)
        posOut(:,i) = rot(:,:,i) * posIn(:,i);
    end
    xJSM = posOut(1,:);
    yJSM = posOut(2,:);
    zJSM = posOut(3,:);
end


function [BxS3, ByS3, BzS3] = JROT_JSMtoS3C(BxJSM, ByJSM, BzJSM, ctimes)
% Rotate Jupiter-solar-magnetic coordinates to System 3 cartesian

    global trueToKK;
    if ~trueToKK
        ets = ctime2et(ctimes);
        % See description of JUNO_JSM in JROT_S3CtoJSM above
        rot = cspice_pxform('JUNO_JSM', 'IAU_JUPITER', ets);
    else
        % Retrieve dipole orientation and initialize rotation matrices
        dipole = JSMdipoleCoeffs();
        rot = zeros(3,3, length(ctimes));

        % Construct rotation matrix with the JSM basis vectors as rows of
        % the matrix, for the S3C -> JSM conversion, then transpose to get
        % JSM -> S3C conversion.
        % First, get xJSM basis vector orientation
        [stheta, sphi, ~] = JSun(ctimes);
        rot(1,1,:) = cos(stheta) .* cos(sphi);
        rot(1,2,:) = cos(stheta) .* sin(sphi);
        rot(1,3,:) = sin(stheta);
        % Next get yJSM as Mdip x xJSM
        rot(2,1,:) = rot(1,3,:) * dipole(3,2) - rot(1,2,:) * dipole(3,3);
        rot(2,2,:) = rot(1,1,:) * dipole(3,3) - rot(1,3,:) * dipole(3,1);
        rot(2,3,:) = rot(1,2,:) * dipole(3,1) - rot(1,1,:) * dipole(3,2);
        denom = sqrt(rot(2,1,:).^2 + rot(2,2,:).^2 + rot(2,3,:).^2);
        rot(2,1,:) = rot(2,1,:) ./ denom;
        rot(2,2,:) = rot(2,2,:) ./ denom;
        rot(2,3,:) = rot(2,3,:) ./ denom;
        % Finally, get zJSM as xJSM x yJSM
        rot(3,1,:) = rot(1,2,:) .* rot(2,3,:) - rot(1,3,:) .* rot(2,2,:);
        rot(3,2,:) = rot(1,3,:) .* rot(2,1,:) - rot(1,1,:) .* rot(2,3,:);
        rot(3,3,:) = rot(1,1,:) .* rot(2,2,:) - rot(1,2,:) .* rot(2,1,:);
        % Now transpose to get S3C -> JSM rotation
        for i=1:length(ctimes)
            rot(:,:,i) = rot(:,:,i)';
        end
    end
    
    BvecIn = [BxJSM; ByJSM; BzJSM];
    BvecOut = zeros(size(BvecIn));
    for i=1:length(ctimes)
        BvecOut(:,i) = rot(:,:,i) * BvecIn(:,i);
    end
    BxS3 = BvecOut(1,:);
    ByS3 = BvecOut(2,:);
    BzS3 = BvecOut(3,:);
end


function [xpJSO, ypJSO, zpJSO] = xyz2pJSO(x, y, z, sphi)
% Rotate position vectors from cartesian to pseudo-JSO, where z is parallel
% to the jovian spin axis and so x does not point toward the Sun as in JSO,
% but the Sun does lie in the xz plane. Equivalent to the Jupiter-despun-Sun
% frame (JUNO_JSS) in the Juno frames kernel.
    xpJSO =  x .* cos(sphi) + y .* sin(sphi);
	ypJSO = -x .* sin(sphi) + y .* cos(sphi);
	zpJSO =  z;
end


function [x, y, z] = cyl2xyz(rho, phi, zin)
% Convert position vectors from cylindrical coordinates to cartesian
    x = rho .* cos(phi);
    y = rho .* sin(phi);
    z = zin;
end


function [rho, phi, z] = xyz2cyl(x, y, zin)
% Convert position vectors from cartesian coordinates to cylindrical
    rho = sqrt(x.^2 + y.^2);
    phi = atan2(y, x);
    z = zin;
end


function [x, y, z] = sph2xyz(r, theta, phi)
% Convert position vectors from spherical coordinates to cartesian
    x = r .* sin(theta) .* cos(phi);
    y = r .* sin(theta) .* sin(phi);
    z = r .* cos(theta);
end


function [r, theta, phi] = xyz2sph(x, y, z)
% Convert position vectors from cartesian coordinates to spherical
    r = sqrt(x.^2 + y.^2 + z.^2);
    theta = acos(z ./ r);
    phi = atan2(y, x);
end


%% Magnetic field vector basis conversions

function [Bx, By, Bz] = Bcyl2Bxyz(Brho, Bphi, Bzin, phi)
% Convert vector components aligned to cylindrical coordinates
% into vector components aligned to cartesian axes.
% Source: Arfken, Weber, Harris, Mathematical Methods for Physicists,
% 7th ed, pg. 197 for the unit vectors.
    Bx =  cos(phi) .* Brho ...
        - sin(phi) .* Bphi;
    By =  sin(phi) .* Brho ...
        + cos(phi) .* Bphi;
    Bz =  Bzin;
end


function [Brho, Bphi, Bzout] = Bxyz2Bcyl(Bx, By, Bz, phi)
% Convert vector components aligned to cylindrical coordinates
% into vector components aligned to cartesian axes.
% Source: Arfken, Weber, Harris, Mathematical Methods for Physicists,
% 7th ed, pg. 197 for the unit vectors.
    Brho  =  cos(phi) .* Bx ...
           + sin(phi) .* By;
    Bphi  = -sin(phi) .* Bx ...
           + cos(phi) .* By;
    Bzout = Bz;
end


function [Bx, By, Bz] = Bsph2Bxyz(Br, Bth, Bphi, theta, phi)
% Convert vector components aligned to spherical coordinates
% into vector components aligned to cartesian axes.
% Source: Arfken, Weber, Harris, Mathematical Methods for Physicists,
% 7th ed, pg. 199 for the unit vectors.
    Bx =  sin(theta) .* cos(phi) .* Br ...
        + cos(theta) .* cos(phi) .* Bth ...
        - sin(phi) .* Bphi;
    By =  sin(theta) .* sin(phi) .* Br ...
        + cos(theta) .* sin(phi) .* Bth ...
        + cos(phi) .* Bphi;
    Bz =  cos(theta) .* Br ...
        - sin(theta) .* Bth;
end


function [Br, Bth, Bphi] = Bxyz2Bsph(Bx, By, Bz, theta, phi)
% Convert vector components aligned to cartesian axes
% into vector components aligned to spherical coordinates.
% Source: Arfken, Weber, Harris, Mathematical Methods for Physicists,
% 7th ed, pg. 199 for the unit vectors.
    Br   =  sin(theta) .* cos(phi) .* Bx ...
          + sin(theta) .* sin(phi) .* By ...
          + cos(theta) .* Bz;
    Bth  =  cos(theta) .* cos(phi) .* Bx ...
          + cos(theta) .* sin(phi) .* By ...
          - sin(theta) .* Bz;
    Bphi = -sin(phi) .* Bx ...
          + cos(phi) .* By;
end


function [Bx, By, Bz] = BpJSO2Bxyz(BxpJSO, BypJSO, BzpJSO, sphi)
% Rotate cartesian vector aligned with pseudo-JSO coordinates to JS3
    Bx = BxpJSO .* cos(sphi) - BypJSO .* sin(sphi);
    By = BxpJSO .* sin(sphi) + BypJSO .* cos(sphi);
    Bz = BzpJSO;
end


%% ctime/etime calculators

function ctimes = ctimer(ets)
% Converts times from seconds past an epoch near J2000 to seconds past
% midnight Jan 1, 1966 using Mice. 
% MJS note: I don't understand why the reference is against 1/1/1966.
% The JS3(1965) epoch is 1965-01-01 at midnight, see:
% https://agupubs.onlinelibrary.wiley.com/doi/epdf/10.1029/GL004i002p00065
% but the ctime column in the provided trajectory files is consistent
% with a 1966 reference time.
    J1965 = cspice_str2et('1966-01-01T00:00:00.000');
    adj = cspice_str2et('2000-01-01T12:00:00.000') + 37.5;
    ctimes = ets - J1965 + adj;
end


function ets = ctime2et(ctimes)
% Converts times from seconds past midnight Jan 1, 1966 to seconds past
% J2000 epoch using Mice.
    J1965 = cspice_str2et('1966-01-01T00:00:00.000');
    adj = cspice_str2et('2000-01-01T12:00:00.000') + 37.5;
    ets = ctimes + J1965 - adj;
end


function etime = etimer(ctimes)
% Calculate etime, an adjusted ctime that appears to be accounting for leap
% seconds.

    Tcor = zeros(size(ctimes));
    Tcor(ctimes >= 189302400.000) = Tcor(ctimes >= 189302400.000) + 10;
    Tcor(ctimes >= 205027200.000) = Tcor(ctimes >= 205027200.000) + 1;
    Tcor(ctimes >= 220924800.000) = Tcor(ctimes >= 220924800.000) + 1;
    Tcor(ctimes >= 252460800.000) = Tcor(ctimes >= 252460800.000) + 1;
    Tcor(ctimes >= 283996800.000) = Tcor(ctimes >= 283996800.000) + 1;
    Tcor(ctimes >= 315532800.000) = Tcor(ctimes >= 315532800.000) + 1;
    Tcor(ctimes >= 347155200.000) = Tcor(ctimes >= 347155200.000) + 1;
    Tcor(ctimes >= 378691200.000) = Tcor(ctimes >= 378691200.000) + 1;
    Tcor(ctimes >= 410227200.000) = Tcor(ctimes >= 410227200.000) + 1;
    Tcor(ctimes >= 441763200.000) = Tcor(ctimes >= 441763200.000) + 1;
    Tcor(ctimes >= 489024000.000) = Tcor(ctimes >= 489024000.000) + 1;
    Tcor(ctimes >= 520560000.000) = Tcor(ctimes >= 520560000.000) + 1;
    Tcor(ctimes >= 552096000.000) = Tcor(ctimes >= 552096000.000) + 1;
    Tcor(ctimes >= 615254400.000) = Tcor(ctimes >= 615254400.000) + 1;
    Tcor(ctimes >= 694224000.000) = Tcor(ctimes >= 694224000.000) + 1;
    Tcor(ctimes >= 757382400.000) = Tcor(ctimes >= 757382400.000) + 1;
    Tcor(ctimes >= 788918400.000) = Tcor(ctimes >= 788918400.000) + 1;
    Tcor(ctimes >= 836179200.000) = Tcor(ctimes >= 836179200.000) + 1;
    Tcor(ctimes >= 867715200.000) = Tcor(ctimes >= 867715200.000) + 1;
    Tcor(ctimes >= 899251200.000) = Tcor(ctimes >= 899251200.000) + 1;
    Tcor(ctimes >= 946684800.000) = Tcor(ctimes >= 946684800.000) + 1;
    Tcor(ctimes >= 993945600.000) = Tcor(ctimes >= 993945600.000) + 1;
    Tcor(ctimes >= 1041379200.00) = Tcor(ctimes >= 1041379200.00) + 1;
    etime = ctimes + Tcor - 0.1072958367816D10;
end


%% Legendre function calculators copied from MagFldJupiter.m

function Pnm = LegendreS(n, m, theta)  % n ( or l) = degree m = order
% Returns the value of Schmidt-seminormalized Legendre function of degree n and order m given the angle theta

    if (n == 1)
        if     (m == 0); Pnm = cos(theta);
        elseif (m == 1); Pnm = sin(theta);
        else;            Pnm = 0;
        end
    elseif (n == 2)
        if     (m == 0); Pnm = (1/2)*(3*cos(theta).^2 - 1);  % P20
        elseif (m == 1); Pnm = sqrt(3)*cos(theta).*sin(theta);
        elseif (m == 2); Pnm = sqrt(3)/2*sin(theta).^2;
        else;            Pnm = 0;
        end
    elseif (n == 3)
        if     (m == 0); Pnm = (1/2)*(5*cos(theta).^3 - 3*cos(theta)); %
        elseif (m == 1); Pnm = sqrt(6)/4*(5*cos(theta).^2 - 1).*sin(theta);
        elseif (m == 2); Pnm = sqrt(15)/2*cos(theta).*sin(theta).^2;
        elseif (m == 3); Pnm = sqrt(10)/4*sin(theta).^3;
        else;            Pnm = 0;
        end
    elseif (n == 4)
        if     (m == 0); Pnm = (1/8)*(35*cos(theta).^4 - 30*cos(theta).^2 + 3);
        elseif (m == 1); Pnm = sqrt(10)/4*(7*cos(theta).^3 - 3*cos(theta)).*sin(theta);
        elseif (m == 2); Pnm = sqrt(5)/4*(7*cos(theta).^2 - 1).*sin(theta).^2;
        elseif (m == 3); Pnm = sqrt(70)/4*cos(theta).*sin(theta).^3;
        elseif (m == 4); Pnm = sqrt(35)/8*sin(theta).^4;
        else;            Pnm = 0;
        end
    else; Pnm = 0;
    end
end


function dPnm = dLegendreS(n, m, theta)
% Returns the value of the derivative of the Schmidt-seminormalized Legendre function of degree n and order m given the angle theta

    if (n == 1)
        if     (m == 0); dPnm = -sin(theta);
        elseif (m == 1); dPnm = cos(theta);
        else;            dPnm = 0;
        end
    elseif (n == 2)
        if     (m == 0); dPnm = -3*cos(theta).*sin(theta);
        elseif (m == 1); dPnm = sqrt(3)*(2*cos(theta).^2 - 1);
        elseif (m == 2); dPnm = sqrt(3)*cos(theta).*sin(theta);
        else;            dPnm = 0;
        end
    elseif (n == 3)
        if     (m == 0); dPnm = -(3/2)*(10*cos(theta)/3 - 1).*sin(theta);
        elseif (m == 1); dPnm = -sqrt(6)/4*(15*sin(theta).^2 - 4).*cos(theta);    
        elseif (m == 2); dPnm = sqrt(15)/2*(3*cos(theta).^2 - 1).*sin(theta); 
        elseif (m == 3); dPnm = 3*sqrt(10)/4*cos(theta).*sin(theta).^2;        
        else;            dPnm = 0;
        end
    elseif (n == 4)
        if     (m == 0); dPnm = -(5/2)*(7*cos(theta).^3 - 3*cos(theta)).*sin(theta);
        elseif (m == 1); dPnm = sqrt(10)/4*(28*cos(theta).^4 - 27*cos(theta).^2 + 3);
        elseif (m == 2); dPnm = sqrt(5)*cos(theta).*sin(theta).*(7*cos(theta).^2 - 4);
        elseif (m == 3); dPnm = sqrt(70)/4*(2*cos(theta).^2 - 1).*sin(theta).^2;  
        elseif (m == 4); dPnm = sqrt(35)/2*cos(theta).*sin(theta).^3;
        else;            dPnm = 0;
        end
    else; dPnm = 0;
    end
end


%% Parameter constants

function [yrJup, omegaJ, omegayr, etime1, obliq, tan_ob, ...
    aa, bb, deltaPhi] = JSunCoeffs
% Get coefficients for Jupiter-Sun angle calculations
    
    aa = [0.14347029, ...
          3.1145815, ...
         -0.12025561, ...
          0.093909436, ...
         -0.39321884e-5, ...
          0.10194945e-3, ...
         -0.12799464];
    bb = [-4.5467523, ...
           3.1848875, ...
          -0.16329986, ...
          -0.09776818, ...
           0.17556527e-3, ...
          -0.01978317, ...
           44.55915];
    deltaPhi = 48.23012;

    global trueToKK;
    if trueToKK
        yrJup = 11.85652502 * 365.25 * 86400;
        omegaJ = 870.536 / 86400;
        thepi = 3.1415927;
        obliq = 3.123 * thepi/180;
        tan_ob = 0.054560676;
    else
        % Is there a way to get this from a SPICE PCK?
        % It seems like using SPICE to perform coordinate transformations is
        % a much, much more precise way of making these calculations and
        % doing so consistently.
        yrJup = 4332.589 * 24;
        % Use SPICE if a PCK is loaded
        try
            PMvals = cspice_bodvcd(599, 'PM', 3);
            omegaJ = PMvals(2) / 86400;
        catch
            omegaJ = 870.536 / 86400;
        end
        thepi = pi;
        obliq = 3.123 * thepi/180;
        tan_ob = tan(obliq);
    end
    
    omegayr = 2*thepi / yrJup;
    etime1 = -8.25767955817479D8;
end


function [g, h] = VIP4coeffs
% Schmidt semi-normalized spherical harmonic coefficients for VIP4 internal 
% field model of Jupiter, organized as h_mn, so that each row represents a 
% single n and each column a single m. See https://doi.org/10.1029/97JA03726.

    global trueToKK;
    if trueToKK
        % This list matches the less-precise table used in Khurana's Jupiter field 
        % model code, and all but the dipole moments match the table in the 
        % associated publication (the dipole moments use more precise values).
        %        g0n,      g1n,      g2n,      g3n,     g4n
        g = [4.20543, -0.65920,        0,        0,       0;
            -0.05100, -0.61900,  0.49700,        0,       0;
            -0.01600, -0.52000,  0.24400, -0.17600,       0;
            -0.16800,  0.22200, -0.06100, -0.20200, 0.06600];
        %        h0n,      h1n,      h2n,      h3n,     h4n
        h =       [0,  0.24992,        0,        0,       0;
                   0, -0.36100,  0.05300,        0,       0;
                   0, -0.08800,  0.40800, -0.31600,       0;
                   0,  0.07600,  0.40400, -0.16600, 0.03900];
    else
        % More precise values matching MagFldJupiter
        %        g0n,      g1n,      g2n,      g3n,     g4n
        g = [4.20543, -0.65920,        0,        0,       0;
            -0.05118, -0.61904,  0.49690,        0,       0;
            -0.01576, -0.52036,  0.24386, -0.17597,       0;
            -0.16758,  0.22210, -0.06074, -0.20243, 0.06643];
        %        h0n,      h1n,      h2n,      h3n,     h4n
        h =       [0,  0.24992,        0,        0,       0;
                   0, -0.36052,  0.05250,        0,       0;
                   0, -0.08804,  0.40829, -0.31586,       0;
                   0,  0.07557,  0.40411, -0.16597, 0.03866];
    end
end


function dipole = JSMdipoleCoeffs
% Dipole parameters used for JSM to System III cartesian rotation
% Includes a 202.000000 degree rotation about z and a 9.600000 degree
% rotation about y, and so according to the following document is
% using "outdated" O4 model parameters: 
% https://lasp.colorado.edu/home/mop/files/2015/02/CoOrd_systems12.pdf

    dipole = [-0.9141996,   0.36936062,  -0.16676875; ...
              -0.3746066,  -0.92718385,            0; ...
              -0.154625290, 0.0624726744, 0.98599604];
end


function CS = CsheetCoeffs
% Coefficients characterizing the current sheet.

    CS = [1.068627, 1.572350, 1.015095, 1.714487, -5.232800, 6.528898];
end


function [period_hr, omegaJ_deghr, X0, phip0, obliq, incl_solar, C, psi2, psi4] ...
    = CsheetStrucCoeffs
% Coefficients relating to the current sheet structure used in calculating
% current sheet location relative to System III equatorial plane

    global trueToKK;
    if trueToKK
        period_hr = 9.927953;
        omegaJ_deghr = 36.26125;
    else
        % Currently accepted Sys3 period is 9.92492 h, not 9.927953.
        % Use SPICE PCK file if loaded
        try
            PMvals = cspice_bodvcd(599, 'PM', 3);
            omegaJ_deghr = PMvals(2) / 24;
        catch
            omegaJ_deghr = 870.536 / 24;
        end
        period_hr = 360 / omegaJ_deghr;
    end
    X0 = -45.0;
    phip0 = 6.12611;
    % MJS: The following numbers, called "three" and "six" in
    % Khurana's code, are the obliquity and orbital inclination relative to
    % the solar spin equator.
    obliq = 0.0558505360;
    incl_solar = 0.11170107;
    C = [0.005973, 5.114e-5, 1.59e-5, 0.313244, -0.366166];
    psi2 = -1.201201;
    psi4 = 2.2604522;
end


function [eps1, eps2, ByConst, BzConst] = BIMFcoeffs
% Coefficients for IMF calculations

    eps1 = 0.068;
	eps2 = 0.554;
    ByConst = 0.0;
	BzConst = 0.001;
end


function [A, B] = MpauseCoeffs
% Parameter constants for B_mp_perp, which calculates magnetic field
% components perpendicular to the magnetopause for shielded dipole calcs.
    A = [14.8636286417325     , ...
        -20.6733061430101     , ...
        -68.9799158183312     , ...
   	    -1.42668213471797D-006, ...
        -2.10151726837109D-004, ...
         7.79886406933501D-006, ...
   	     1.68914984127525D-008, ...
        -1.07213724493682D-007, ...
         5.22885344671751D-007, ...
   	    -4.46205598371400D-008, ...
         2.83331673403534D-007, ...
        -1.38338264037040D-006, ...
   	     7.94736850421990     , ...
         23.4906454129448     , ...
        -17.3725909963207     , ...
   	    -3.95338621079697D-004, ...
        -4.24194742905271D-003, ...
         1.92089873646750D-003, ...
   	    -6.94191156816239D-002, ...
        -0.170169494909972    , ...
        -0.171632981837208    , ...
   	     4.57144670517197D-009, ...
         6.53500870745233D-007, ...
         6.56440399411187D-007, ...
   	    -7.67358819268301D-002, ...
        -0.133394608915796    , ...
        -0.127893292811889    , ...
   	     3.60644094744725D-006, ...
         2.04677410835679D-005, ...
         3.26595444981956D-005];
    B = [32.9198722839323, ...
         64.1556701660173, ...
         128.854949951183, ... 
    	 30.4416656494141, ... 
         45.2417564392090, ...
         107.303962707520, ... 
         28.7235050200276, ...
         63.9741210937499, ...
         128.002441406250, ... 
         33.8896331786845, ...
         60.2880744933923, ...
         119.902839660605, ... 
         32.1036300655818, ...
         62.8152580261215, ...
         127.073867797851];
end


function [C, P, D0, D1, D, f, beta] = CSdeformCoeffs
% Model parameters for current sheet deformation in the magnetotail

    % "Short model"
    C = [-28.402612, -18.160631, 14.543719, 12.873892, -5.590983, 3.461748];
    P = 5.73e-3;
    D0 = 11.0;
    D1 = 9.0;
    D = 2.0;
    
    % Ring current parameters
    [f, beta] = deal(zeros(6, 6));
    
    f(1,:) = [ ...
        188.880535100774, ...
		170.216250249208, ...
	   -232.209387453753, ...
		17729.2564306361, ...
	   -17426.2836367108, ...
	   -176.740242190339];
    f(2,:) = [ ...
        34.5422110518, ...
        6.0536537495, ...
        414.2147150061, ...
       -155.3647545840, ...
        316.3317439470, ...
       -73.2913775361];
    f(3,:) = [ ...
       -165.1020233300, ...
        554.5217109532, ...
        315.5180924885, ...
       -125.0952135958, ...
        449.1102649649, ...
        371.9172713735];
    f(4,:) = [ ...
        591.9706482108, ...
        1376.0166168630, ...
        298.8401265534, ...
       -156.9445820815, ...
        521.9904943354, ...
        2387.3415724416];
    f(5,:) = [ ...
        9180.3492664995, ...
        1679.4592666407, ...
        274.9968669893, ...
       -144.4824637207, ...
        532.5683191252, ...
        4540.5253277291];
    f(6,:) = [ ...
        28927.9037953983, ...
        2214.0596352902, ...
        242.5405186300, ...
       -108.6915959578, ...
        609.8932996003, ...
        7437.5789048160];
    
    beta(1,:) = [ ...
        59.2554626464844, ...
	    14.3016757965088, ...
	    3.41575503349304, ...
        5.47725486755371, ...
	    5.55856323242188, ...
	    30.7563076019287];
    beta(2,:) = [ ...
        59.2781028748, ...
        16.4449157715, ...
        4.1893663406, ...
        3.0382030010, ...
        9.1110754013, ...
        30.9898948669];
    beta(3,:) = [ ...
        55.9542961121, ...
        14.5898332596, ...
        3.9975905418, ...
        2.8588902950, ...
        8.6061649323, ...
        21.9151973724];
    beta(4,:) = [ ...
        59.0788803101, ...
        16.2336521149, ...
        3.5862164497, ...
        2.7877552509, ...
        8.4433155060, ...
        30.6951904297];
    beta(5,:) = [ ...
        59.2788314819, ...
        16.4751930237, ...
        3.5809681416, ...
        2.7559804916, ...
        8.5185470581, ...
        31.0038948059];
    beta(6,:) = [ ...
        72.2351608276, ...
        18.0498085022, ...
        3.7080323696, ...
        2.6697711945, ...
        8.9703912735, ...
        35.2125587463];
end


function [a, c, p, r] = MtailCoeffs
% Parameter constants for B_tail_shield, which calculates magnetic field
% components for a shielded dipole's magnetotail.
    [a, c] = deal(zeros(8, 64));
    [p, r] = deal(zeros(8, 16));
    % Though each of these variables is set to contain 8 rows, rows 7 and 8
    % appear to not be set for any variable in Khurana's code.
    
    % a values
    a(1,:) = [ ...
         0.13217647646022754326D-20, ...
         0.50643011679165539362D-16, ...
        -0.62311994734606299672D-13, ...
         0.73000393989897114366D-10, ...
        -0.10249726242696675093D-07, ...
         0.32914667786334130816D-06, ...
        -0.24800841788149776689D-05, ...
         0.37244082145067776146D-05, ...
         0.22584041437827493403D-17, ...
         0.20229608874904410065D-12, ...
        -0.13496084238172885161D-09, ...
         0.19512264195191708182D-06, ...
        -0.28536292479920302156D-04, ...
         0.92636894313957363067D-03, ...
        -0.69993880953881300044D-02, ...
         0.10518459214365802889D-01, ...
         0.36523294131124144357D-14, ...
        -0.64420435736454777497D-09, ...
        -0.57096883444695674114D-07, ...
        -0.27055379124230958254D-04, ...
         0.44272407289722757184D-02, ...
        -0.14889477801070045259D+00, ...
         0.11356290643917379412D+01, ...
        -0.17106683807405858033D+01, ...
        -0.18416420070040647516D-11, ...
         0.27046079272174843310D-06, ...
         0.44203411790099522704D-04, ...
         0.12944858989375875779D-03, ...
        -0.51975317855123419619D-02, ...
         0.20369979936316231494D+00, ...
        -0.16254799676715984801D+01, ...
         0.24787158145629919481D+01, ...
         0.13636392185761578854D-09, ...
        -0.20156479561298437097D-04, ...
        -0.39633156929923650579D-02, ...
        -0.13365044136678470021D-01, ...
        -0.10442458756051709034D-01, ...
         0.11380270847337552453D+00, ...
        -0.88061814759885734815D+00, ...
         0.13114182967621741404D+01, ...
        -0.22305468438407642928D-08, ...
         0.33146982079580284974D-03, ...
         0.69006040956576439882D-01, ...
         0.27321338618451562751D+00, ...
         0.15256440935574380191D+00, ...
         0.82160642450780390078D-01, ...
        -0.38978676634608163453D+00, ...
         0.47434195602775641731D+00, ...
         0.84447121731127730015D-08, ...
        -0.12569305425012970989D-02, ...
        -0.26569849211645015785D+00, ...
        -0.11069710175423441711D+01, ...
        -0.64840056779980832502D+00, ...
        -0.97562574536155111104D-02, ...
         0.15631498731831953818D+00, ...
        -0.16203940584912954747D+00, ...
        -0.63486912141303140089D-08, ...
         0.94534756045114320954D-03, ...
         0.20061320014222592256D+00, ...
         0.84751706801178663397D+00, ...
         0.50107973765980506897D+00, ...
        -0.14177955455321484379D-03, ...
         0.56476656376811078530D-01, ...
        -0.52516865628955500255D-02];
    
    a(2,:) = [ ...
         0.13619937133704040910D-23, ...
         0.43621985467324879692D-18, ...
        -0.15098830327683961272D-14, ...
         0.63123957003196471404D-11, ...
        -0.11978885144275235319D-08, ...
         0.41934992058305047279D-07, ...
        -0.31951294540338555094D-06, ...
         0.48135741458667444803D-06, ...
         0.24119037788698203250D-20, ...
         0.40881122046673903369D-14, ...
        -0.21545235983615116381D-11, ...
         0.11640656169328844615D-07, ...
        -0.21959806946493167778D-05, ...
         0.76662481447507042631D-04, ...
        -0.58366072779967188566D-03, ...
         0.87913032319456423380D-03, ...
         0.31144339871300497080D-16, ...
        -0.22620785858629064435D-10, ...
        -0.74029445112059493183D-08, ...
        -0.93859788335645291112D-07, ...
         0.82317630609657417295D-04, ...
        -0.36569184498810431982D-02, ...
         0.29432171359264206245D-01, ...
        -0.44946922231727173269D-01, ...
        -0.58080626963236774429D-14, ...
         0.39682408099390080735D-08, ...
         0.16840660739515575627D-05, ...
         0.38335076286793983157D-05, ...
         0.20836381731764990199D-03, ...
        -0.33920492396785180133D-02, ...
         0.15820849562165701485D-01, ...
        -0.19644945238949279797D-01, ...
         0.41076898294619867968D-12, ...
        -0.27989015436962660920D-06, ...
        -0.13840368413368968703D-03, ...
        -0.70869170102476930495D-03, ...
         0.26033168308504186505D-03, ...
        -0.24526926326940952094D-02, ...
        -0.35013567157541127805D-01, ...
         0.69275925576020052076D-01, ...
        -0.70799772156343383500D-11, ...
         0.48274807820722331896D-05, ...
         0.24974637159216332982D-02, ...
         0.15464887864241698700D-01, ...
         0.11439264646130791192D-01, ...
         0.38097770315818785036D-01, ...
        -0.13590064465091589163D+00, ...
         0.17180997533186371128D+00, ...
         0.26783558161963370025D-10, ...
        -0.18266964017400193043D-04, ...
        -0.95586630597219102156D-02, ...
        -0.62918902435418315732D-01, ...
        -0.64039968185764291064D-01, ...
        -0.22222194307812768165D-03, ...
         0.50813426126672718297D-01, ...
        -0.46991112128761134414D-01, ...
        -0.20108572992030198101D-10, ...
         0.13715428126943252085D-04, ...
         0.71979427421967230316D-02, ...
         0.48199320155821636646D-01, ...
         0.49407199622570425745D-01, ...
         0.92225425694026483824D-02, ...
         0.53857653772015723347D-02, ...
         0.91367943357959795491D-03];
     
     a(3,:) = [ ...
         -0.13119415239474609968D-23, ...
         -0.60256122420913360571D-18, ...
          0.37920759812307474057D-14, ...
         -0.18206762505356291370D-10, ...
          0.26774304351790334521D-08, ...
         -0.87684408227198336049D-07, ...
          0.66457031757235851543D-06, ...
         -0.99948895864718618753D-06, ...
         -0.25960636282069127211D-19, ...
         -0.42000012814022671392D-16, ...
          0.74796457397241065123D-11, ...
         -0.25318674869395683124D-07, ...
          0.34976874196721219334D-05, ...
         -0.11242351418125537954D-03, ...
          0.84791358984972013956D-03, ...
         -0.12736554117114038398D-02, ...
          0.76343432773888704190D-16, ...
          0.64378927275727946266D-12, ...
          0.16598929643645348619D-08, ...
         -0.92837331289370776943D-05, ...
          0.14285390095735186477D-02, ...
         -0.47503134695174127344D-01, ...
          0.36153292729534660665D+00, ...
         -0.54431063875700962384D+00, ...
         -0.25391252497671850107D-13, ...
         -0.31368629291300997863D-09, ...
          0.14987071996970728449D-05, ...
          0.17824032262389087222D-04, ...
          0.11355427076600370650D-02, ...
         -0.37610982091768150326D-01, ...
          0.28513697308043282063D+00, ...
         -0.42869687938445020236D+00, ...
          0.17211923850683952252D-11, ...
          0.31101556003157209140D-07, ...
         -0.12650545583107459801D-03, ...
         -0.30769692479640595728D-02, ...
         -0.45994232482610790668D-02, ...
          0.15393025113972294448D-01, ...
          0.86726269138905074385D-02, ...
         -0.41633915235090732664D-01, ...
         -0.27638896781422706006D-10, ...
         -0.55187436783116812222D-06, ...
          0.21199958794900246594D-02, ...
          0.61391435739846613728D-01, ...
          0.52329651593674135767D-01, ...
         -0.83734155027368615265D-01, ...
          0.12671335310678004670D+00, ...
         -0.18213430508768142956D+00, ...
          0.10413809392985686752D-09, ...
          0.21324280383467479893D-05, ...
         -0.80597222736636293660D-02, ...
         -0.24311900160452664110D+00, ...
         -0.13586934681330335994D+00, ...
          0.10699875405203342904D-02, ...
         -0.67114222283495701404D-01, ...
          0.56104987912055399590D-02, ...
         -0.78195074731598692707D-10, ...
         -0.16113432047677196834D-05, ...
          0.60646416575606716392D-02, ...
          0.18453527959746301334D+00, ...
          0.97748021711249979404D-01, ...
         -0.86931770826402736673D-01, ...
         -0.25859340706079221305D-01, ...
          0.30535054676239381521D-01];
 
    a(4,:) = [ ...
         -0.11168229337158983582D-20, ...
         -0.96888835482058599524D-16, ...
          0.28484097342054432999D-12, ...
         -0.88991894939124396302D-09, ...
          0.13436311859750933450D-06, ...
         -0.43949492953948432472D-05, ...
          0.33267991354851349505D-04, ...
         -0.50016760854385964307D-04, ...
         -0.20765635100251089717D-17, ...
         -0.36197386357992140659D-12, ...
          0.35732517136988684036D-09, ...
         -0.11320141902699047964D-05, ...
          0.16737866108943116216D-03, ...
         -0.54399134640077706492D-02, ...
          0.41108560676656589194D-01, ...
         -0.61778272173930721677D-01, ...
         -0.49227064641270947831D-14, ...
          0.13773911494082902162D-08, ...
          0.28000536764000152345D-06, ...
         -0.60982707102378110874D-05, ...
         -0.45545917365779216012D-03, ...
          0.30474617144202409413D-01, ...
         -0.26240435518843665541D+00, ...
          0.40666851745242809101D+00, ...
          0.24046710130055206633D-11, ...
         -0.56928231643345874601D-06, ...
         -0.14658425595003152785D-03, ...
         -0.54669311790752939117D-03, ...
          0.63289641147589756897D-01, ...
         -0.23416266019622873351D+01, ...
          0.18376229679993183907D+02, ...
         -0.27890706711124808592D+02, ...
         -0.17790734879856566763D-09, ...
          0.41757078162568088686D-04, ...
          0.12661549470502249103D-01, ...
          0.30791263485754920559D-01, ...
          0.52395704373591174274D-01, ...
         -0.15856752943903087427D+01, ...
          0.11848914793373501730D+02, ...
         -0.17521753728113509396D+02, ...
          0.29086256117761690731D-08, ...
         -0.68275932316891383422D-03, ...
         -0.21784801486997875663D+00, ...
         -0.66623989758662736093D+00, ...
         -0.28050159504711622560D+00, ...
         -0.67774272696429793683D+00, ...
          0.10271422822879689995D+01, ...
         -0.63392178592402839143D+00, ...
         -0.11009990780568283952D-07, ...
          0.25849182195501789749D-02, ...
          0.83614032826616710991D+00, ...
          0.27685938326621157834D+01, ...
          0.16426046025686344975D+01, ...
          0.78572426172170208857D+00, ...
         -0.18258375964853595263D+01, ...
          0.12152196449017165225D+01, ...
          0.82768727273709110647D-08, ...
         -0.19433482187601436308D-02, ...
         -0.63081127374393464180D+00, ...
         -0.21366815638955616307D+01, ...
         -0.13446774521063316054D+01, ...
         -0.58592309940003861612D+00, ...
          0.31827661237739279798D+00, ...
         -0.20240366730373042791D+00];
     
    a(5,:) = [ ...
         -0.13947208148057608312D-20, ...
         -0.20210120268149411870D-15, ...
          0.45539475964762736737D-12, ...
         -0.11170239869341296312D-08, ...
          0.16610385153669340319D-06, ...
         -0.54155353001624000341D-05, ...
          0.40961114502502580236D-04, ...
         -0.61571027127369957199D-04, ...
         -0.15010983747727246750D-17, ...
         -0.56103448860629763217D-12, ...
          0.43831990483680147718D-09, ...
         -0.10609291877688533656D-05, ...
          0.15387190085182278487D-03, ...
         -0.49799395553291745386D-02, ...
          0.37594128280158018995D-01, ...
         -0.56482482158755402679D-01, ...
         -0.84949700310157272298D-14, ...
          0.19131227654780431635D-08, ...
          0.23797873673175664599D-06, ...
          0.67357172013098089990D-04, ...
         -0.11412327840147937774D-01, ...
          0.38787752218711162299D+00, ...
         -0.29661484451688613361D+01, ...
          0.44710237927891309794D+01, ...
          0.36903300990875096410D-11, ...
         -0.78266544732189755606D-06, ...
         -0.14356129913638142170D-03, ...
         -0.52616304038202654780D-03, ...
          0.50792590874790795041D-01, ...
         -0.18789041423837609556D+01, ...
          0.14745664699188227864D+02, ...
         -0.22381820221529649117D+02, ...
         -0.26744771000491356360D-09, ...
          0.57361959249991540943D-04, ...
          0.12466277937525278574D-01, ...
          0.35752121631968263315D-01, ...
          0.49443768069258187125D-01, ...
         -0.11592738471082895124D+01, ...
          0.85575941704881230975D+01, ...
         -0.12621255590568500881D+02, ...
          0.43525625631567042006D-08, ...
         -0.93805114409436534117D-03, ...
         -0.21484367014734804257D+00, ...
         -0.75606598389073855770D+00, ...
         -0.38916312244605659742D+00, ...
         -0.45744351551847461934D+00, ...
          0.91714655267490634571D+00, ...
         -0.70503052173487583687D+00, ...
         -0.16457579884296458239D-07, ...
          0.35517012004150618764D-02, ...
          0.82496531512910689087D+00, ...
          0.31057726963483678339D+01, ...
          0.18813656203693941648D+01, ...
          0.51092359576032500001D+00, ...
         -0.12428990388842335867D+01, ...
          0.89617638629098603786D+00, ...
          0.12368783158269132105D-07, ...
         -0.26702315450896003667D-02, ...
         -0.62244835948407777337D+00, ...
         -0.23879836056356684714D+01, ...
         -0.14962346641346604414D+01, ...
         -0.32180960449888429408D+00, ...
          0.14080714553385571541D+00, ...
         -0.12793599129792307955D+00];
    
    a(6,:) = [ ...
         -0.71007031654422592126D-20, ...
         -0.82331351329343824829D-15, ...
          0.14860700245019204501D-11, ...
         -0.18336776863420102046D-08, ...
          0.26381273327308489839D-06, ...
         -0.85305767261458509409D-05, ...
          0.64390806859274407614D-04, ...
         -0.96740352003902945199D-04, ...
         -0.47759968145964668551D-17, ...
         -0.11110703618965760419D-11, ...
          0.93331659872542349631D-09, ...
         -0.11361217227825839426D-05, ...
          0.16101720194965896126D-03, ...
         -0.51853068878838977084D-02, ...
          0.39098877702660601585D-01, ...
         -0.58726418277052969685D-01, ...
         -0.20561632805425666958D-13, ...
          0.30615328304455808883D-08, ...
          0.24271749535760407390D-06, ...
          0.15937085189299786236D-03, ...
         -0.25318551119527441528D-01, ...
          0.84552595243637060917D+00, ...
         -0.64376874089793245659D+01, ...
          0.96932895116823303283D+01, ...
          0.87503551825887093684D-11, ...
         -0.13163374744119336057D-05, ...
         -0.21315095274792228430D-03, ...
         -0.75679626156015320503D-03, ...
          0.43875888066817978483D-01, ...
         -0.16187067723465442981D+01, ...
          0.12704254977048992092D+02, ...
         -0.19288846975099222191D+02, ...
         -0.62980025164513007140D-09, ...
          0.99033147185834717873D-04, ...
          0.19286483194829802556D-01, ...
          0.67190391627066974322D-01, ...
          0.59018569821895905391D-01, ...
         -0.57675212643809139478D+00, ...
          0.41759144712554761014D+01, ...
         -0.60616007357605896643D+01, ...
          0.10235134109675949609D-07, ...
         -0.16329320547735449054D-02, ...
         -0.33676325501000334838D+00, ...
         -0.13741116541224409619D+01, ...
         -0.82897929864310349046D+00, ...
         -0.29064544069947594095D+00, ...
          0.99716723490406433683D+00, ...
         -0.11955304085306053352D+01, ...
         -0.38688354152446052580D-07, ...
          0.61964020776766650655D-02, ...
          0.12977027325262353585D+01, ...
          0.55698639583852660450D+01, ...
          0.35055306218486181890D+01, ...
          0.24501453852569592406D+00, ...
         -0.51229945875859312920D+00, ...
          0.42642747170716877036D+00, ...
          0.29074290348871754119D-07, ...
         -0.46611910769336493132D-02, ...
         -0.98002188003461245813D+00, ...
         -0.42652335402388423801D+01, ...
         -0.27213526220765031915D+01, ...
         -0.21604814310942872523D+00, ...
         -0.40325674485435270000D+00, ...
          0.12987860657487151350D+00];
 
    % c values
    c(1,:) = [ ...
          0.62608370709224905326D-18, ...
         -0.69296927042311144973D-15, ...
          0.53793142672880289723D-22, ...
          0.55953376048336647130D-13, ...
         -0.13644845214970875435D-11, ...
          0.51560868494277940499D-10, ...
         -0.38841223167697958018D-09, ...
          0.58169693048278663383D-09, ...
          0.79948744245788159190D-02, ...
          0.28880230453715999061D-01, ...
          0.18816017618889148366D-03, ...
          0.30432220614412108794D-01, ...
          0.20335251312180755434D-01, ...
          0.12253559136086547010D+01, ...
         -0.11162104253917091156D+02, ...
          0.17710281832472645646D+02, ...
         -0.30562966462902028119D+03, ...
         -0.11990795349370895195D+04, ...
         -0.65802994518949660118D+01, ...
         -0.12273805927634358070D+04, ...
         -0.65349097657709229736D+03, ...
         -0.12824769943213845024D+03, ...
         -0.88590404530202224719D+02, ...
         -0.92014824378423334394D+02, ...
         -0.95152195796331646704D+02, ...
         -0.36956353969242154988D+03, ...
         -0.20695307247843501841D+01, ...
         -0.38362497103275590148D+03, ...
         -0.22776414558915512031D+03, ...
         -0.46624811555373160132D+02, ...
          0.45685596890036768158D+02, ...
         -0.25467538299896208542D+03, ...
          0.32918009134216310584D+03, ...
          0.12851583684685703445D+04, ...
          0.71222223072393315845D+01, ...
          0.13249069943127731452D+04, ...
          0.74436590714498462872D+03, ...
          0.14749387222546454623D+03, ...
          0.42968129090712094964D+02, ...
          0.33666974003731491293D+03, ...
          0.20156315877857942098D+03, ...
          0.80514059433962259504D+03, ...
          0.42634222620010087112D+01, ...
          0.79880139299917756190D+03, ...
          0.34272486825284445011D+03, ...
          0.52606372363987690121D+02, ...
          0.74826789775518696146D+01, ...
         -0.49206154796489274261D+01, ...
         -0.53421252140832686805D+03, ...
         -0.21573846013695305856D+04, ...
         -0.11180286753450849879D+02, ...
         -0.20919394990520148169D+04, ...
         -0.77083430972020012816D+03, ...
         -0.74269446238765679524D+02, ...
          0.86081879160377337001D+01, ...
         -0.33189293006747679903D+01, ...
          0.64042667076955872573D+03, ...
          0.25941583461638844099D+04, ...
          0.13364255832056319839D+02, ...
          0.24982768986941823463D+04, ...
          0.87945971890665362025D+03, ...
          0.70070351276938351858D+02, ...
         -0.86139878258589916981D+01, ...
          0.30011846979293261838D+01];
    
    c(2,:) = [ ...
         -0.63013334128716040893D-13, ...
          0.60865772431920603935D-05, ...
         -0.40016262502772708131D-09, ...
         -0.23069864565108759713D-04, ...
          0.23255146051530801720D-03, ...
         -0.51951144258714805346D-02, ...
          0.36136455088219365805D-01, ...
         -0.53017682607232261560D-01, ...
          0.55436122531818750047D-03, ...
         -0.66992043381081387565D-02, ...
          0.83803970952918511727D-02, ...
          0.80754210845424374554D-02, ...
         -0.61427751801047527635D-02, ...
          0.54122156026262873140D+00, ...
         -0.43010880044939874267D+01, ...
          0.65777678112627633311D+01, ...
         -0.23084376754368056694D+02, ...
          0.20899246010739616075D+03, ...
         -0.36836390749521057408D+03, ...
         -0.52914996781002994197D+03, ...
         -0.20007855689466294002D+03, ...
         -0.36056061195965001253D+02, ...
         -0.16132602175333610183D+02, ...
          0.21643026623710106548D+01, ...
         -0.30489331973819799870D+01, ...
          0.33304902492752548326D+02, ...
         -0.47908018506183607243D+02, ...
         -0.66968634395671120529D+02, ...
         -0.34606055921065168590D+02, ...
         -0.74942275618948936966D+01, ...
          0.20818848022147209420D+02, ...
         -0.68532587218682348151D+02, ...
          0.44092752992499013586D+01, ...
         -0.47413797913825259655D+02, ...
          0.69401964003076273002D+02, ...
          0.97614272148050673649D+02, ...
          0.48704912842393142113D+02, ...
          0.99941378554753921292D+01, ...
         -0.14570861805562320689D+02, ...
          0.65068431858518227528D+02, ...
          0.27754841758044097588D+02, ...
         -0.24286715291266780525D+03, ...
          0.44379959765035561503D+03, ...
          0.63697225078825798760D+03, ...
          0.23079424266757904149D+03, ...
          0.39146925311929221535D+02, ...
          0.12991883575647105075D+02, ...
         -0.34552170740359109402D+01, ...
         -0.20272909693943255149D+02, ...
          0.14757207634388509021D+03, ...
         -0.32708628601917539846D+03, ...
         -0.46225115463536488036D+03, ...
         -0.13753186496272293837D+03, ...
         -0.14358017591372269627D+02, ...
          0.41733787941502891172D+00, ...
         -0.14829734668187728452D+00, ...
          0.22054195737479753702D+02, ...
         -0.15104824369566767217D+03, ...
          0.35667767962821925742D+03, ...
          0.50036616092734789162D+03, ...
          0.14078440554104824755D+03, ...
          0.12025910667067751802D+02, ...
         -0.70328949883151059552D+00, ...
          0.24434145951697048282D+00];
    
    c(3,:) = [ ...
         -0.28862183650305684778D-01, ...
          0.16202748718849406373D-02, ...
          0.62452442623701900359D-08, ...
         -0.10292552636752272388D-04, ...
          0.14899979598450072693D-10, ...
          0.54701873831866327790D+00, ...
         -0.33801096158365382393D+01, ...
          0.46663975792709919687D+01, ...
          0.82086900572783427776D+00, ...
          0.66781995371601139410D+00, ...
          0.17689517609606757453D+01, ...
          0.18458732991639696052D+01, ...
         -0.13408206456871818446D-02, ...
         -0.55045820392109447993D+01, ...
          0.34057914707574474810D+02, ...
         -0.44172744618314503384D+02, ...
         -0.33440561402073085695D+04, ...
         -0.63006668870531044035D+04, ...
         -0.16148889754716360123D+05, ...
         -0.16734685574071548330D+05, ...
          0.98894432761575998824D+01, ...
         -0.10391741179165414621D+04, ...
         -0.17857836173455567951D+04, ...
          0.29803489709704852117D+04, ...
          0.31915064954348162373D+04, ...
          0.59270193788343030760D+04, ...
          0.15182397380443129364D+05, ...
          0.15734311019448650625D+05, ...
         -0.93434105903445914265D+01, ...
          0.99260524095183413351D+03, ...
          0.20341329769010583206D+04, ...
         -0.32962143597458424260D+04, ...
         -0.92169284592923155230D+02, ...
         -0.14814666530740792538D+03, ...
         -0.37839662711403616590D+03, ...
         -0.39255805350361141492D+03, ...
          0.24567231705288499199D+00, ...
         -0.11195431933835682247D+02, ...
         -0.27154689478860825069D+03, ...
          0.37730991124653248114D+03, ...
          0.54075863200485683179D+03, ...
          0.13068947201920562140D+04, ...
          0.34015030753731947399D+04, ...
          0.35222027482034166112D+04, ...
         -0.19372427035775936943D+01, ...
          0.10115813738135293053D+03, ...
         -0.23832476149210184424D+02, ...
         -0.16890808415607296844D+02, ...
         -0.77613909679256050111D+03, ...
         -0.22744934351169181496D+04, ...
         -0.60171788754328519033D+04, ...
         -0.62294563978631467549D+04, ...
          0.32775011290202917813D+01, ...
         -0.72131812461142832404D+02, ...
          0.27116603294455088324D+02, ...
         -0.71224576605140779150D+01, ...
          0.69369255218888747904D+03, ...
          0.22078310233442990373D+04, ...
          0.58858136079721381506D+04, ...
          0.60932655114670426499D+04, ...
         -0.31519955877359868701D+01, ...
          0.44446156981790601037D+02, ...
         -0.14233922505288183479D+02, ...
          0.34387488557126792976D+01];
    
    c(4,:) = [ ...
         -0.36868002035455376130D-21, ...
          0.10541748946585167701D-17, ...
          0.27755566547052099579D-13, ...
         -0.34780372211895671519D-15, ...
         -0.99328472275559516191D-12, ...
          0.37378357885053432596D-10, ...
         -0.27315035342737905565D-09, ...
          0.40965931239852784173D-09, ...
         -0.33737087677076624814D-04, ...
         -0.11396625664731094840D-02, ...
         -0.10789923154822660400D-01, ...
         -0.80796849963401182748D-02, ...
          0.32166227895723737972D-01, ...
         -0.25571424523548520468D+01, ...
          0.21267119641439142796D+02, ...
         -0.33078925310689939465D+02, ...
         -0.17479871537929662750D+01, ...
         -0.72444600080193755076D+02, ...
         -0.55033093275560522883D+03, ...
         -0.50210145669063086515D+03, ...
         -0.25844521786360195036D+03, ...
         -0.55113408951058726614D+02, ...
          0.20187135793924890769D+03, ...
         -0.81289982453232934034D+03, ...
          0.78603614447709357904D+00, ...
          0.32329428441630612134D+02, ...
          0.24762820448825531016D+03, ...
          0.22413360241783610860D+03, ...
          0.11996249854833778059D+03, ...
          0.30448969122459486058D+02, ...
         -0.23988687682537666034D+03, ...
          0.67671098556149500424D+03, ...
          0.12159934205840530196D+01, ...
          0.51016427583112839982D+02, ...
          0.38232595903016939331D+03, ...
          0.35346430190826185757D+03, ...
          0.17043627550273194870D+03, ...
          0.36343814970370997841D+02, ...
          0.25302217119464871508D+02, ...
          0.16017628158741096910D+03, ...
         -0.13415948717761450037D+01, ...
         -0.59032589809690589888D+02, ...
         -0.41777999557453684431D+03, ...
         -0.40902457469604014406D+03, ...
         -0.14475183395103458749D+03, ...
         -0.29478536348031818548D+02, ...
         -0.13387094046024579085D+01, ...
          0.23831368497822609242D+01, ...
          0.55621147775238517496D+01, ...
          0.24890779339281028370D+03, ...
          0.17228008107309571883D+04, ...
          0.17256605312262474072D+04, ...
          0.52806415548478540245D+03, ...
          0.64772764588200661961D+02, ...
         -0.12923255027738644784D+02, ...
          0.58752559976531326668D+01, ...
         -0.73285857760141963623D+01, ...
         -0.32941251542733325230D+03, ...
         -0.22662989686584209536D+04, ...
         -0.22842752627361360140D+04, ...
         -0.66988125859857134969D+03, ...
         -0.67321294156948754405D+02, ...
          0.12094082762406057618D+02, ...
         -0.50344380663030463551D+01];
    
    c(5,:) = [ ...
          0.57951308146739251014D+01, ...
         -0.14999087019121093433D+03, ...
         -0.19559326802070165385D+01, ...
         -0.66720804039446477418D+03, ...
         -0.75756207610197607849D+02, ...
         -0.79695623597154439110D+02, ...
          0.12741669724908954997D+04, ...
         -0.25779398744795645193D+04, ...
          0.25559373539070939784D+03, ...
         -0.26954324048080380293D+04, ...
          0.42741834334120607508D+02, ...
         -0.13609107834915077361D+05, ...
         -0.18219129315199742435D+04, ...
         -0.49540503909243787106D+03, ...
         -0.86525145704320394202D+03, ...
         -0.19349682251463748983D+04, ...
         -0.87923543175638503299D+05, ...
          0.30861003822923382955D+06, ...
         -0.25217316373834348652D+05, ...
          0.21333098058144601694D+07, ...
          0.33404584481156045505D+06, ...
          0.42354436002087458845D+05, ...
          0.58637814837743640339D+04, ...
         -0.30291614862820930298D+04, ...
          0.21501887419077996277D+06, ...
         -0.98416860975998154970D+06, ...
          0.50756266605703403982D+05, ...
         -0.58885368624678218196D+07, ...
         -0.88230632458050202160D+06, ...
         -0.24671074506661172520D+06, ...
         -0.14496629047056444505D+06, ...
          0.68193611837692298394D+05, ...
          0.18016800297232990146D+02, ...
          0.11854731605905291047D+00, ...
          0.41242056558479642802D-02, ...
          0.10788775915866732901D+00, ...
          0.76539029541206167195D+00, ...
          0.67292188204585867694D+02, ...
         -0.31151519702859546967D+03, ...
          0.44202304203357769551D+03, ...
          0.20068140169309098830D+06, ...
         -0.93099363016509286694D+06, ...
          0.47215756436253171202D+05, ...
         -0.55473705494319487385D+07, ...
         -0.82963829864856943885D+06, ...
         -0.23595446376207669381D+06, ...
         -0.14387731979865256981D+06, ...
          0.66726697732453104094D+05, ...
         -0.10659833147754620430D+06, ...
          0.36525155976544767533D+06, ...
         -0.32972599682804299980D+05, ...
          0.26280915665374022793D+07, ...
          0.41399542203693986408D+06, ...
          0.40200322950430580348D+05, ...
          0.33714384362519780324D+04, ...
         -0.16170695162643912823D+04, ...
          0.45385852289903034773D+05, ...
         -0.15367285853252436567D+06, ...
          0.15938904084451054998D+05, ...
         -0.11759967065602889846D+07, ...
         -0.18617563074881875451D+06, ...
         -0.11629254312624910383D+05, ...
         -0.37356632983270783299D+03, ...
          0.13368622059973152005D+03];
    
    c(6,:) = [ ...
          0.37071935082976326114D-15, ...
          0.46201169190899653571D-08, ...
         -0.62075147292222574435D-11, ...
         -0.36146708876274598054D-06, ...
          0.87046861427880060091D-05, ...
         -0.10076975633470059978D-03, ...
          0.89298240723925399464D-03, ...
         -0.14060364310276510124D-02, ...
         -0.56188781974792609830D-01, ...
         -0.40650854381275376425D+01, ...
         -0.14988738284605299000D+01, ...
         -0.38632728626301734209D+01, ...
         -0.22261011246466999580D+01, ...
         -0.14212548821848476343D+02, ...
          0.19383430976405556123D+03, ...
         -0.34806064213022160913D+03, ...
          0.27593841470781566016D+03, ...
          0.22140385471263797079D+05, ...
          0.78362796461845718454D+04, ...
          0.19668830633326862766D+05, ...
          0.10181292569179314355D+05, ...
          0.39096643822536609746D+04, ...
          0.26876686999693699675D+04, ...
          0.33310618692009836827D+04, ...
          0.44061551736067183782D+02, ...
          0.34746817101944778016D+04, ...
          0.12384774155446498511D+04, ...
          0.31312056838986070950D+04, ...
          0.17260274467090328087D+04, ...
          0.70922681375271823256D+03, ...
         -0.30968222241454737009D+03, ...
          0.29976750308301927105D+04, ...
         -0.29826526924997253331D+03, ...
         -0.23828019858653441964D+05, ...
         -0.84485266842828430355D+04, ...
         -0.21247202725657969857D+05, ...
         -0.11181459854792739072D+05, ...
         -0.43708622712852429614D+04, ...
         -0.24560179552632419586D+04, ...
         -0.60645360750106398484D+04, ...
         -0.74893303991611572811D+02, ...
         -0.62909773314430736945D+04, ...
         -0.21848887114479706994D+04, ...
         -0.53368828632132494504D+04, ...
         -0.22162146435679854761D+04, ...
         -0.52579256909996399116D+03, ...
         -0.11309723650631768876D+03, ...
          0.63863048387678587047D+02, ...
          0.19717911116782794067D+03, ...
          0.16899744672548959734D+05, ...
          0.58199397638247170050D+04, ...
          0.13983841291452328015D+05, ...
          0.50676093636595025415D+04, ...
          0.75432123378980122652D+03, ...
          0.10996364977646411276D+02, ...
         -0.48990730626876937137D+01, ...
         -0.22796489432205970793D+03, ...
         -0.19665709629971770411D+05, ...
         -0.67538957248075544015D+04, ...
         -0.16130393271007925193D+05, ...
         -0.55557948391593710013D+04, ...
         -0.67829337377268315023D+03, ...
          0.63691256079676055179D+01, ...
         -0.36820923261738309761D+01];
    
    % p values
    p(1,:) = [ ...
          0.32901733177624610249D-01, ...
          0.54475681390900216882D-01, ...
          0.11033542666255162778D+00, ...
          0.21824017019698205288D+00, ...
          0.43540342906595910221D+00, ...
          0.87057139406808232706D+00, ...
          0.17411041057694376377D+01, ...
          0.34822027229232799250D+01, ...
          0.29391078654639329670D-01, ...
          0.53092570701901200536D-01, ...
          0.10068022495463000431D+00, ...
          0.21707901052684266396D+00, ...
          0.43526892089758080217D+00, ...
          0.87054714666225887498D+00, ...
          0.17411005963420354447D+01, ...
          0.34822023079824373503D+01];
 
    p(2,:) = [ ...
          0.32535198971349430507D-01, ...
          0.57792553225847100861D-01, ...
          0.11708104989648597804D+00, ...
          0.21135795367821805790D+00, ...
          0.42489217791799518408D+00, ...
          0.86257818103884389415D+00, ...
          0.17181130605554559842D+01, ...
          0.34339371403040641617D+01, ...
          0.25660275820190880935D-01, ...
          0.45569108067616728163D-01, ...
          0.86363227093303382986D-01, ...
          0.20636215029847653212D+00, ...
          0.42568882948609800820D+00, ...
          0.85912749746654117899D+00, ...
          0.17163445496343952001D+01, ...
          0.34350464850833977159D+01];
 
    p(3,:) = [ ...
          0.32114531391568896800D-01, ...
          0.54668167014354631660D-01, ...
          0.10999415084820487464D+00, ...
          0.21830735865316683863D+00, ...
          0.43522952245694588313D+00, ...
          0.87059254539023882557D+00, ...
          0.17410412227916809868D+01, ...
          0.34821651743153156921D+01, ...
          0.25685870467860096866D-01, ...
          0.45698157579046663201D-01, ...
          0.90356977415432240263D-01, ...
          0.21884901172766766386D+00, ...
          0.43511983572804924236D+00, ...
          0.87029548334738358050D+00, ...
          0.17410538620391950992D+01, ...
          0.34822549594214162738D+01];
 
    p(4,:) = [ ...
          0.32356337372804593321D-01, ...
          0.54152800183054496940D-01, ...
          0.10961184933750356407D+00, ...
          0.21794853515003347332D+00, ...
          0.43533813536787366871D+00, ...
          0.87056003928681793269D+00, ...
          0.17411018194244403112D+01, ...
          0.34822024269907854154D+01, ...
          0.27588798509226557520D-01, ...
          0.48812593148800704767D-01, ...
          0.93213066985517798457D-01, ...
          0.21740973446223286202D+00, ...
          0.43526939652742839825D+00, ...
          0.87054487704825334049D+00, ...
          0.17411007942523434977D+01, ...
          0.34822023168779896451D+01];
 
    p(5,:) = [ ...
          0.32735344319694603676D-01, ...
          0.54347222488222799441D-01, ...
          0.10989084818706484902D+00, ...
          0.21805120636819852464D+00, ...
          0.43536325140487690532D+00, ...
          0.87056578462259590622D+00, ...
          0.17411028067887455605D+01, ...
          0.34822028139735676788D+01, ...
          0.27779830466381087994D-01, ...
          0.50806515286805851161D-01, ...
          0.95276608648916276678D-01, ...
          0.21745769582596392588D+00, ...
          0.43527860088967376128D+00, ...
          0.87054808117661632849D+00, ...
          0.17411000172672461694D+01, ...
          0.34822021788641484008D+01];
 
    p(6,:) = [ ...
          0.33568077258163553366D-01, ...
          0.53905902840230535133D-01, ...
          0.10958409128391679487D+00, ...
          0.21675427898182215713D+00, ...
          0.43240630217346920360D+00, ...
          0.86456015794363612059D+00, ...
          0.17290777196751532684D+01, ...
          0.34581494323600296958D+01, ...
          0.28810823097181398111D-01, ...
          0.53751387895676616679D-01, ...
          0.10088751776373805491D+00, ...
          0.21567365023402529367D+00, ...
          0.43226560363373209838D+00, ...
          0.86453474685580449232D+00, ...
          0.17290747052830268692D+01, ...
          0.34581487532588752742D+01];
 
    % r values
    r(1,:) = [ ...
          0.23400582376918621640D-01, ...
          0.29906910603763133593D+00, ...
          0.59419217080359816307D+00, ...
          0.51683309796288279258D+00, ...
          0.55280210585007472090D+00, ...
          0.89024092184836405294D+00, ...
          0.17236578859735887547D+01, ...
          0.34342717240262339295D+01, ...
          0.89287729231317083389D-01, ...
          0.15439963383324775136D+00, ...
          0.50639243810157408276D-01, ...
          0.24456407532792816539D+00, ...
          0.39627924482769603997D+00, ...
          0.86233612861692066076D+00, ...
          0.17188649618875711411D+01, ...
          0.34339261899212027984D+01];
 
    r(2,:) = [ ...
          0.70036641254021372304D-01, ...
          0.33297901220247387854D+00, ...
          0.80631162662909527938D+00, ...
          0.54483599484759341891D+00, ...
          0.56290677049809243470D+00, ...
          0.87422019588133075274D+00, ...
          0.17295204193052738261D+01, ...
          0.34651766994561397083D+01, ...
          0.57115996571135090320D-01, ...
          0.23559291883706992010D+00, ...
          0.11690775021980281955D+00, ...
          0.26929992715503474620D+00, ...
          0.42836762405666322095D+00, ...
          0.87049839288489376798D+00, ...
          0.17350924596759142559D+01, ...
          0.34557476257228634253D+01];
 
    r(3,:) = [ ...
          0.11127103098086079668D+00, ...
          0.42445608810651771491D+00, ...
          0.71058432225687280237D+00, ...
          0.69760620618057709307D+00, ...
          0.58851822769682966551D+00, ...
          0.10410712531090018373D+01, ...
          0.18016710591015945297D+01, ...
          0.35162043268667866335D+01, ...
          0.50015594405195891170D+00, ...
          0.32951760674056020938D+00, ...
          0.11251791947458271714D+00, ...
          0.19597524022502758711D+00, ...
         -0.52856178098938624287D-01, ...
          0.95266905942729742662D+00, ...
          0.18279298809137124237D+01, ...
          0.35144044692591625000D+01];
 
    r(4,:) = [ ...
          0.22860180522694295568D-01, ...
          0.25001972739726898709D+00, ...
          0.46402414947596950511D+00, ...
          0.44398927627952060603D+00, ...
          0.50272011857581864191D+00, ...
          0.88445628872250843244D+00, ...
          0.17389166922733014786D+01, ...
          0.34834653146383227628D+01, ...
          0.49049989399817732760D-01, ...
          0.85147557568237122183D-01, ...
          0.23424821227315173466D+00, ...
          0.14250169643289223309D+00, ...
          0.40586458823694400166D+00, ...
          0.87361464455904407344D+00, ...
          0.17279679104606691097D+01, ...
          0.34828619038557646625D+01];
 
    r(5,:) = [ ...
          0.48558255088791124620D+00, ...
         -0.60422350819111194653D+00, ...
         -0.13683535645881987896D+01, ...
         -0.85855064913451286656D+00, ...
          0.28100294887963377377D+00, ...
          0.84995521582071482669D+00, ...
          0.17002422172314077819D+01, ...
          0.34601959118742100507D+01, ...
         -0.60269701842058500673D+00, ...
         -0.31233918670609019940D+00, ...
         -0.71139286069860601102D-01, ...
          0.13800610282920311533D+00, ...
          0.38218789451073229557D+00, ...
          0.81980250822178710734D+00, ...
          0.17183601833584307705D+01, ...
          0.34710558209881763325D+01];
 
    r(6,:) = [ ...
          0.38821262813796547419D-01, ...
          0.35983028187700409894D+00, ...
          0.57018233005798357737D+00, ...
          0.51153414239116576922D+00, ...
          0.55367851931772325002D+00, ...
          0.92841885168264770555D+00, ...
          0.17036409347489702703D+01, ...
          0.34382652552776309384D+01, ...
          0.54101616716924096905D-01, ...
          0.17168542829213128797D+00, ...
          0.10028211367824637623D+00, ...
          0.27153034480893150082D+00, ...
          0.43311645903980116045D+00, ...
          0.75314774033930556029D+00, ...
          0.17038798689307688150D+01, ...
          0.34370447884477832722D+01];
end
